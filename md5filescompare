#!/usr/bin/php
<?php

# md5 file sum files comparer
# by robert klebe, dotpointer

# create lists to compare by md5deep -r -e -l -of * > files.md5

# changelog
# 2019-08-17 01:07:00 - initial version, starting off from md5filecheck
# 2024-03-25 22:20:00 - adding moved status and log output

# echo or print to file
function echop($f, $text) {
  if ($f) {
    fputs($f, $text);
  } else {
   echo $text;
 }
}

# index a file
function index(&$data, $f, $key) {
  # loop files
  $i=0;
  while ($line = fgets($f)) {
    $i++;
    $line = trim($line);
    # preg_match('/([a-zA-Z0-9]+)\s+(.*)/', $line, $matches);
    $matches = explode('  ', $line, 2);
    if (!isset($matches[0], $matches[1])) {
      echo 'Failed splitting line '.$i."\n";
      continue;
    }

    $md5 = $matches[0];
    $name = $matches[1];

    if (!isset($data[$name])) {
      $data[$name] = array();
    }
    $data[$name]['md5'.$key] = $md5;
  }
}

# create a printable title
function title($title, $count) {
  $title = $title.': '.$count;
  return $title."\n".str_repeat('-', strlen($title))."\n";
}

$filea = isset($argv[1]) ? $argv[1] : '';
$fileb = isset($argv[2]) ? $argv[2] : '';
$filelog = isset($argv[3]) ? $argv[3] : false;

if ($filea === '-h' || $filea === '--help' && $fileb === '') {
  echo 'Usage: '.basename(__FILE__).' <file with md5 sums and paths> <file with md5 sums and paths> [output logfile]'."\n";
  die();
}

if (!strlen($filea) || !strlen($fileb)) {
  echo 'Please specify 2 md5 file sum files.'."\n";
  die(1);
}

if (!file_exists($filea)) {
  echo 'File not found: '.$filea."\n";
  die(1);
}

if (!file_exists($fileb)) {
  echo 'File not found: '.$fileb."\n";
  die(1);
}

$fa = fopen($filea, 'r');
if (!$fa) {
  echo 'Failed opening: '.$filea."\n";
  die(1);
}

$fb = fopen($fileb, 'r');
if (!$fb) {
  echo 'Failed opening: '.$fileb."\n";
  fclose($fa);
  die(1);
}

if ($filelog) {
  $flog = fopen($filelog, 'w');
  if (!$flog) {
    echo 'Failed opening log file: '.$filelog."\n";
    exit(1);
  }
}

$data = array();
index($data, $fa, 'a');
index($data, $fb, 'b');

fclose($fa);
fclose($fb);

$stats = array(
  'error' => 0,
  'matching' => 0,
  'mismatching' => 0,
  'moved' => 0,
  'onlya' => 0,
  'onlyb' => 0
);

define('STATUS_OK', 1);
define('STATUS_MISMATCH', 2);
define('STATUS_MOVED', 3);
define('STATUS_ONLY_A', 4);
define('STATUS_ONLY_B', 5);
define('STATUS_ERROR_FORMAT', 6);

$total = count($data);
$i=0;
foreach ($data as $key => $item) {
  $i++;
  echo 'Comparing '.$total.' rows: '.str_pad($i, strlen($total), ' ', STR_PAD_LEFT).' '.
    sprintf('%05.2f', round( ($i / $total) * 100, 2)).'% '.
    $stats['matching'].' matches, '.
    $stats['mismatching'].' mismatches, '.
    $stats['moved'].' moved, '.
    $stats['onlya'].' only a, '.
    $stats['onlyb'].' only b, '.
    $stats['error'].' errors'."\r";

  $md5a = isset($item['md5a']) && strlen($item['md5a']) ? $item['md5a'] : false;
  $md5b = isset($item['md5b']) && strlen($item['md5b']) ? $item['md5b'] : false;

  if ($md5a !== false && $md5b !== false) {
    if ($md5a === $md5b) {
      $stats['matching']++;
      $data[$key]['status'] = STATUS_OK;
    } else {
      $stats['mismatching']++;
      $data[$key]['status'] = STATUS_MISMATCH;
    }
  } else if ($md5a) {
    $found = false;
    foreach ($data as $k2 => $i2) {
      if (!isset($i2['md5b']) || !strlen($i2['md5b'])) continue;
      if ($md5a === $i2['md5b']) {
        $stats['moved']++;
        $data[$key]['status'] = STATUS_MOVED;
        $data[$key]['moved'] = $k2;
        $found = true;
        break;
      }
    }
    if (!$found) {
      $stats['onlya']++;
      $data[$key]['status'] = STATUS_ONLY_A;
    }
  } else if ($md5b) {
    $stats['onlyb']++;
    $data[$key]['status'] = STATUS_ONLY_B;
  } else {
    $stats['error']++;
    $data[$key]['status'] = STATUS_ERROR_FORMAT;
  }
}

echo "\n";

# print matching
echop($flog, title('Matching files', $stats['matching'])."\n");

# print mismatching
echop($flog, title('Mismatching files', $stats['mismatching']));
foreach ($data as $key => $item) {
  if ($item['status'] !== STATUS_MISMATCH) continue;
  echop($flog, $item['md5a'].'  '.$item['md5b'].'  '.$key."\n");
}
echop($flog, "\n");

# print moved
echop($flog, title('Moved files', $stats['moved']));
foreach ($data as $key => $item) {
  if ($item['status'] !== STATUS_MOVED) continue;
  echop($flog, $item['md5a'].'  '.$key.' -> '.$item['moved']."\n");
}
echop($flog, "\n");

# print only in a
echop($flog, title('Files only in A', $stats['onlya']));
foreach ($data as $key => $item) {
  if ($item['status'] !== STATUS_ONLY_A) continue;
  echop($flog, $item['md5a'].'  '.$key."\n");
}
echop($flog, "\n");

# print only in b
echop($flog, title('Files only in B', $stats['onlyb']));
foreach ($data as $key => $item) {
  if ($item['status'] !== STATUS_ONLY_B) continue;
  echop($flog, $item['md5b'].'  '.$key."\n");
}

# print errors only if there were any
if ($stats['error'] > 0) {
  echop($flog, "\n");
  echop($flog, title('Files with missing MD5', $stats['error']));
  foreach ($data as $key => $item) {
    if ($item['status'] !== STATUS_ERROR_FORMAT) continue;
    echop($flog, $key."\n");
  }
  echop($flog, "\n");
}

if ($flog) fclose($flog);

?>
