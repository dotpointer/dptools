#!/usr/bin/php
<?php

# backup-databases
# backup mysqli/mariadb databases
# by robert klebe, dotpointer

# changelog
# 2009-02-16 02:38:00 - backup databases
# 2013-10-17 00:00:00 - improved version 2, rewritten after accidental rm rf operation.
# 2013-10-22 00:00:00 - edit after cron bugfix which had incomplete paths
# 2014-06-30 00:00:00 - first making xz on the tmp dir, then moving it, to avoid unnecessary load on the target disk
# 2014-10-30 00:00:00 - adding config.php
# 2014-11-01 11:50:16 - huge update, adding config file
# 2014-11-01 22:19:56 - removing base2 requirement
# 2015-07-17 23:02:00 - adding memlimit-compress=64MiB to prevent tar xz from stopping on low memory systems
# 2015-07-21 20:06:00 - adding -q to suppress messages about lowering memory
# 2015-08-22 01:16:52 - adding add-drop-database and databases
# 2015-08-22 01:18:17
# 2015-08-24 16:20:07
# 2016-04-30 21:48:54 - adding config and include option
# 2016-12-27 19:14:42 - renaming file from backup_databases to backup-databases
# 2018-06-28 13:20:00 - minor cleanup
# 2018-06-28 15:43:00 - description edit

# debug printing
function cl($s, $level = 1) {
	global $config;

	# do not log passwords from mountcifs
	$s = preg_replace('/--password=\".*\"/', 'password="*****"', $s);

	# find out level of verbosity
	switch ($level) {
		case VERBOSE_ERROR:
			$l = 'E';
			break;
		case VERBOSE_INFO:
			$l = 'I';
			break;
		case VERBOSE_DEBUG:
			$l = 'D';
			break;
	}
	$s = '['.date('Y-m-d H:i:s').' '.$l.'] '.$s."\n";

	# is verbosity on and level is enough?
	if ($config['verbose'] && $config['verbose'] >= $level) echo $s;

	# is loglevel on and level is enough - the try to append to log
	if ($config['loglevel'] && $config['loglevel'] >= $level && $f = fopen($config['file_log'], 'a')) {
		fwrite($f, $s);
		fclose($f);
	}

	return true;
}

# to remove comments
function remove_comments($s) {
	$s = explode("\n", $s);
	foreach ($s as $k => $v) {
			$s[$k] = preg_replace('/^\s*\#+.*$/', '',$v);
	}
	return implode("\n", $s);
}

# --- main

#make sure all extensions are loaded
if (!function_exists('json_decode')) {
	echo 'JSON extension is not loaded, make sure it is installed and in php.ini'."\n";
	die(1);
}

# make sure mysql functions are available
if (!function_exists('mysqli_error')) {
	echo 'MySQLi extension is not loaded, make sure it is installed and in php.ini, or that mysql_* functions are available through shim library'."\n";
	die(1);
}

# verbosity
define('VERBOSE_OFF', 0);
define('VERBOSE_ERROR', 1);
define('VERBOSE_INFO', 2);
define('VERBOSE_DEBUG', 3);

$stopafterdump = false;

$config = array(
	'file_config' => '/etc/dptools/backup-databases',
	'dir_include' => ''
);

# get arguments
$arguments = getopt(
	'dfhpv::ws',
	array(
		'config:',
		'dry-run',
		'forcedaily',
		'help',
		'include:',
		'printconfig',
		'stopafterdump',
		'verbose::',
		'writeconfig'
	)
);

# pre-handle options for config location and include dir
foreach ($arguments as $k => $v) {
	switch ($k) {
		case 'config':
			$config['file_config'] = $v;
			break;
		case 'include':
			$config['dir_include'] = $v;
			break;
	}
}

# get config
if (file_exists($config['file_config'])) {
	$configtmp = json_decode(remove_comments(file_get_contents($config['file_config'])), true);
	if ($configtmp === NULL) {
		echo 'Invalid configuration file: '.$config['file_config']."\n";
		die(1);
	}
	$config = array_merge($config, $configtmp);
	unset($configtmp);
}

# config defaults
$config['database_host'] 				= isset($config['database_host']) ? $config['database_host'] : 'localhost';
$config['database_name'] 				= isset($config['database_name']) ? $config['database_name'] : '';
$config['database_password'] 			= isset($config['database_password']) ? $config['database_password'] : '';
$config['database_username'] 			= isset($config['database_username']) ? $config['database_username'] : 'root';
$config['databases'] 					= isset($config['databases']) && is_array($config['databases']) ? $config['databases'] : false;
$config['databases_ignore'] 			= isset($config['databases_ignore']) && is_array($config['databases_ignore']) ? $config['databases_ignore'] : array('information_schema', 'mysql', 'performance_schema');
# extra parameters to pass to each database, for example array('mysql' => '--events')
$config['databases_extra_parameters'] 	= isset($config['databases_extra_parameters']) ? $config['databases_extra_parameters'] : array();
$config['dir_backup'] 					= isset($config['dir_backup']) ? $config['dir_backup'] : '/var/backup/mysql/';
$config['dryrun'] 						= isset($config['dryrun']) ? $config['dryrun'] : false;
$config['file_log'] 					= isset($config['file_log']) ? $config['file_log'] : '/var/log/backup_databases';
$config['forcedaily'] 					= isset($config['forcedaily']) ? $config['forcedaily'] : false;
$config['loglevel'] 					= isset($config['loglevel']) && is_numeric($config['loglevel']) ? $config['loglevel'] : VERBOSE_DEBUG;
$config['dir_temp'] 					= isset($config['dir_temp']) ? $config['dir_temp'] : '/tmp/';
# keep all backups for a week at least
$config['timeout_keep_all'] 			= isset($config['timeout_keep_all']) && is_numeric($config['timeout_keep_all']) ? $config['timeout_keep_all'] : 60 * 60 * 24 * 7;
# remove all backups older than 365 days
$config['timeout_remove_all'] 			= isset($config['timeout_remove_all']) && is_numeric($config['timeout_remove_all']) ? $config['timeout_remove_all'] : 60 * 60 * 24 * 365;
$config['timezone']				   		= isset($config['timezone']) ? $config['timezone'] : 'Europe/Stockholm';
$config['use_global_config']			= isset($config['use_global_config']) ? $config['use_global_config'] : false;
$config['verbose'] 						= isset($config['verbose']) && is_numeric($config['verbose']) ? $config['verbose'] : VERBOSE_OFF; # level of verbosity, 0=off, 1=errors, 2=info, 3=debug

# make sure all dirs end with a slash
foreach (array('dir_backup', 'dir_temp') as $k) {
	$config[$k] = substr($config[$k], -1) !== '/' ? $config[$k].'/' : $config[$k];
}
ksort($config);

# set the timezone
date_default_timezone_set($config['timezone']);

# should we use global config?
if ($config['use_global_config']) {
	# then include that using the include dir
	require_once($config['dir_include'].'config.php');
	# walk the database constants
	foreach (array('name', 'password', 'username', 'host') as $k) {
		# does the required constant exist?
		if (defined('DATABASE_'.strtoupper($k))) {
			# then use that
			$config['database_'.$k] = constant('DATABASE_'.strtoupper($k));
		}
	}
}

# handle options
foreach ($arguments as $k => $v) {
	switch ($k) {
		case 'd':
		case 'dryrun':
			$config['dryrun'] = true;
			cl('Dry-run option activated (logging also disabled)', VERBOSE_DEBUG);
			$config['loglevel'] = 0; # do not log this session
			break;
		case 'f': # force - do not care about intervals and such
		case 'forcedaily':
			$config['forcedaily'] = true;
			cl('Force daily option activated', VERBOSE_DEBUG);
			break;
		case 'h': # print help
		case 'help':
		echo basename(__FILE__);
?>

To backup databases and remove old backups
-d, --dry-run
	Do a dry-run, do not make any changes
-v[v,vv], --verbose
	Set verbosity level
-f,--forcedaily
	Force daily option
-w, --writeconfig
	Output a config to <?php echo $config['file_config']?>
-s, --stopafterdump
	Stop working after dumping data to temp dir
<?php
			die();
		case 'p':
		case 'printconfig':
			foreach ($config as $k2 => $v2) {
				echo $k2.' => ';
				if (is_array($v2)) {
					echo implode(', ', $v2);
				} else if (is_bool($v2)) {
					echo $v2 ? 'true' : 'false';
				} else {
					echo $v2;
				}
				echo "\n";
			}
			die();
		case 's':
		case 'stopafterdump':
			$stopafterdump = true;
			break;
		case 'v': # be verbose
		case 'verbose':
			# determine and set level of verbosity
			switch ($v) {
				default:
					$config['verbose'] = VERBOSE_ERROR;
					break;
				case 'v':
					$config['verbose'] = VERBOSE_INFO;
					break;
				case 'vv':
					$config['verbose'] = VERBOSE_DEBUG;
					break;
			}
			break;

		case 'w': # write config
		case 'writeconfig':
			# make sure we do not write over the old config
			if (file_exists($config['file_config'])) {
				cl("Configuration file already exists:".$config['file_config'], VERBOSE_ERROR);
				die(1);
			}
			cl('Writing config to: '.$config['file_config'], VERBOSE_DEBUG);
			file_put_contents($config['file_config'], json_encode($config));
			die();
	}
}

# check backup root dir path
if (!file_exists($config['dir_backup']) || !is_dir($config['dir_backup'])) {
	cl("Backup directory does not exist: ".$config['dir_backup'], VERBOSE_ERROR);
	die(1);
}

# check temp backup root dir path
if (!file_exists($config['dir_temp']) || !is_dir($config['dir_temp'])) {
	cl("Backup directory does not exist: ".$config['dir_temp'], VERBOSE_ERROR);
	die(1);
}

# connect to database
$link = mysqli_connect($config['database_host'], $config['database_username'], $config['database_password']);
if (!$link) {
	cl(mysql_error(), VERBOSE_ERROR);
	die(1);
}

# part 1 - make daily backup

# construct today filename - YYYY-mm-dd.tar.cz
$today_filename = date('Y-m-d').'.tar.xz';

# no backup for today found - or force daily
if (!file_exists($config['dir_backup'].$today_filename) || $config['forcedaily']) {

	# ask for db:s
	$sql = 'SHOW DATABASES';
	cl('Running query: '.$sql, VERBOSE_DEBUG);
	$r = mysqli_query($link, 'SHOW DATABASES');
	if ($r === false) {
		cl(mysql_error, VERBOSE_ERROR);
		die(1);
	}

	$databases = array();
	# walk result row by row
	while ($row = mysqli_fetch_assoc($r)) {
		# put row in to array
		$databases[] = $row;
	}

	# free result
	mysqli_free_result($r);

	# disconect db
	mysqli_close($link);

	# any dbs?
	if (count($databases)) {

		cl('Found '.count($databases). ' databases', VERBOSE_DEBUG);

		# construct path to a tempdir
		$tempdir = $config['dir_temp'].date('Y-m-d').'-temp-backup/';
		# does path not exist?
		if (!file_exists($tempdir)) {
			cl('Making dir: '.$tempdir, VERBOSE_DEBUG);
			# try to make dir
			if (!$config['dryrun']) {
				exec('mkdir -p '.$tempdir);
				if (!file_exists($tempdir)) die(cl('Failed creating temp dir: '.$tempdir, VERBOSE_ERROR));
			}

			cl('Setting chmod 700 on temp dir: '.$tempdir, VERBOSE_DEBUG);
			if (!$config['dryrun']) {
				# correct rights on the dir
				chmod($tempdir, 0700);
			}
		}

		if (!$config['dryrun']) {
			# make sure it is a dir
			if (!is_dir($tempdir)) die(cl('Temp dir is not a dir: '.$tempdir));
		}

		$dumped_databases = array();
		$dumpfiles = array();
		# walk db:s
		foreach ($databases as $database) {
			$database = $database['Database'];

			# is this db to ignore?
			if (
				in_array($database, $config['databases_ignore'])
				||
				(
					is_array($config['databases'])
					&&
					!in_array($database, $config['databases'])
				)
			) {
				cl('Ignoring database '.$database, VERBOSE_DEBUG);
				continue;
			}

			cl('Dumping database '.$database, VERBOSE_INFO);

			$dumpfile = $database.'.sql';
			$dumpfile_fullpath = $tempdir.$dumpfile;
			# dump this db to tmp location

			$cmd = 'mysqldump -u "'.escapeshellcmd(DATABASE_USERNAME).'" --password="'.DATABASE_PASSWORD.'" --add-drop-database '.(array_key_exists($database, $config['databases_extra_parameters']) ? $config['databases_extra_parameters'][$database].' ' : '').' --databases '.escapeshellcmd($database).' > '.escapeshellcmd($dumpfile_fullpath);
			cl('Running: '.$cmd, VERBOSE_DEBUG);

			if (!$config['dryrun']) {
				# strange things happen when these are defined and they hit exec
				unset($output, $return_var);
				exec($cmd, $output, $return_var);

				# not 0 then it's error
				if ($return_var !== 0 || !file_exists($dumpfile_fullpath) || !filesize($dumpfile_fullpath)) {
					cl('Dump empty or failed for db: '.$database, VERBOSE_INFO);
					if (file_exists($dumpfile_fullpath)) {
						cl('Removing dump file: '.$dumpfile_fullpath, VERBOSE_DEBUG);
						unlink($dumpfile_fullpath);
					}
					continue;
				}
			}

			cl('Setting chmod 700 on dumpfile: '.$dumpfile_fullpath, VERBOSE_DEBUG);
			if (!$config['dryrun']) {
				chmod($dumpfile_fullpath, 0700);
				cl('Dump file size: '.filesize($dumpfile_fullpath).' b', VERBOSE_DEBUG);
			}


			$dumpfiles[] = $dumpfile;
		}

		if ($stopafterdump) {
			cl('Dump files are now ready at: '.$tempdir, VERBOSE_DEBUG);
			die();
		}
		# any dumpfiles?
		if (count($dumpfiles)) {
			cl(count($dumpfiles).' dumpfiles ready', VERBOSE_DEBUG);
			# XZ_OPT="-9e" can be set to maximize compression, but it is very slow, default is -6 and manual does not recommend
			# higher than -7 due to high memory usage and the time needed
			# -q = quiet, do not whine about lowering memory
			$cmd = 'cd '.escapeshellcmd($tempdir).' && export XZ_OPT="--memlimit-compress=64MiB -q" && /bin/tar cJf '.escapeshellcmd($config['dir_temp'].$today_filename).' *';
			cl('Running: '.$cmd, VERBOSE_DEBUG);
			if (!$config['dryrun']) {
				# strange things happen when these are defined and they hit exec
				unset($output, $return_var);
				exec($cmd, $output, $return_var);

				if ($return_var !== 0) {
					cl('Creation of tar file failed: '.var_export($output,true), VERBOSE_ERROR);
					var_dump($return_var);
				}
			}

			# walk the dumpfiles
			foreach ($dumpfiles as $dumpfile) {
				# fullpath to file
				$dumpfile_fullpath = $tempdir.$dumpfile;
				# does the dump file exist?
				if (file_exists($dumpfile_fullpath)) {
					# then remove it
					cl('Removing dump file: '.$dumpfile_fullpath, VERBOSE_DEBUG);
					if (!$config['dryrun']) {
						unlink($dumpfile_fullpath);
					}
				}
			}

			# does the temp dir exist?
			if (file_exists($tempdir) && is_dir($tempdir)) {
				# then remove it
				cl('Removing temp dir: '.$tempdir, VERBOSE_DEBUG);
				if (!$config['dryrun']) {
					rmdir($tempdir);
				}
			}

			# move file into place
			$cmd = 'mv '.escapeshellcmd($config['dir_temp'].$today_filename).' '.escapeshellcmd($config['dir_backup'].$today_filename);
			cl('Running: '.$cmd, VERBOSE_DEBUG);
			if (!$config['dryrun']) {
				# strange things happen when these are defined and they hit exec
				unset($output, $return_var);
				exec($cmd, $output, $return_var);

				if ($return_var !== 0) {
					cl('Creation of tar file failed: '.var_export($output,true), VERBOSE_ERROR);
				}
			}

			cl('Backup file created: '.$config['dir_backup'].$today_filename, VERBOSE_INFO);
		}
	}
} else {
	cl('Backup for today exists: '.$config['dir_backup'].$today_filename, VERBOSE_INFO);
}

# part 2 - check for outdated backups

# get a list of files
$cmd = 'find '.escapeshellarg($config['dir_backup']).' -type f -iname "*.tar.xz"';
cl('Running: '.$cmd, VERBOSE_DEBUG);
$files = shell_exec($cmd);
# without trim here we get empty array items
$files = explode("\n", trim($files));
if ($files === NULL) {
	cl('Find failed', VERBOSE_ERROR);
	die(1);
}

# any files?
if (count($files)) {
	cl('Sorting files A-Z', VERBOSE_DEBUG);
	sort($files);

	$timeout_keep_all = time() - $config['timeout_keep_all'];
	$timeout_remove_all = time() - $config['timeout_remove_all'];

	# walk them
	$kept_months = array();
	foreach ($files as $file_fullpath) {
		$file = basename($file_fullpath);

		# is this not a archive - go next
		if (!preg_match('/^[0-9]{3}[0-9]+\-[0-9]{2}-[0-9]{2}\.tar\.xz$/i', $file)) {
			cl('Ignoring file: '.$file_fullpath, VERBOSE_DEBUG);
			continue;
		}

		$file_date = substr($file, 0, strpos($file, '.'));
		$file_timestamp = strtotime($file_date);

		if ($file_timestamp === false) {
			cl('Ignoring file, invalid date in filename: '.$file_fullpath, VERBOSE_DEBUG);
			continue;
		}

		# is this file empty?
		if (filesize($file_fullpath) === 0) {
			cl('Removing file, it is empty: '.$file_fullpath, VERBOSE_DEBUG);
			unlink($file_fullpath);
			continue;
		}

		# is file within keep-all timeout?
		if ($file_timestamp > $timeout_keep_all) {
			cl('Keeping file, within keep-all timeout: '.$file_fullpath, VERBOSE_DEBUG);
			continue;
		}

		# is file out of remove-all limit?
		if ($file_timestamp < $timeout_remove_all) {
			# remove it
			cl('Removing file, outside remove-all timeout: '.$file_fullpath, VERBOSE_DEBUG);
			unlink($file_fullpath);
			continue;
		}

		if (in_array(date('Y-m', $file_timestamp), $kept_months)) {
			cl('Removing file, already have file for month '.date('Y-m', $file_timestamp).': '.$file, VERBOSE_DEBUG);
			unlink($file_fullpath);
		} else {
			cl('Keeping file, used for month '.date('Y-m', $file_timestamp).': '.$file, VERBOSE_DEBUG);
			$kept_months[] = date('Y-m', $file_timestamp);
			continue;
		}
	}
}

?>
