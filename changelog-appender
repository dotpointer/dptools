#!/usr/bin/php
<?php

# changelog appender
# appends lines to changelogs within files
# by robert klebe, dotpointer

# changelog
# 2018-07-15 18:56:00 - first version
# 2018-07-16 22:21:00

# verbosity levels
define('VERBOSE_OFF', 0);    # no info at all
define('VERBOSE_ERROR', 1);    # only errors
define('VERBOSE_INFO', 2);    # above and things that changes
define('VERBOSE_DEBUG', 3);    # above and verbose info
define('VERBOSE_DEBUG_DEEP', 4);    # above and exec outputs

# default config
$config = array(
  'config' => '/etc/dptools/'.basename(__FILE__),
  'backup' => true,
  'date' => time(),
  'input' => false,
  'line' => false,
  'linewidth' => 80,
  'linelimit' => 200,
  'logfile' => '/var/log/'.basename(__FILE__),
  'logwidth' => 80,
  'loglevel' => VERBOSE_OFF,
  'minimumdiff' => 60 * 15,
  'output' => false,
  'verbose' => VERBOSE_ERROR,
  'write' => false
);

# debug printing
function cl($s, $level=1) {
    global $config;

  # find out level of verbosity
  switch ($level) {
    case VERBOSE_ERROR:
      $l = 'E';
      break;
    case VERBOSE_INFO:
      $l = 'I';
      break;
    case VERBOSE_DEBUG:
    case VERBOSE_DEBUG_DEEP:
      $l = 'D';
      break;
  }

  if (is_array($s)) {
    $tmp = '';
    $s = array_merge(
      array(
        array(
          'text' => date('Y-m-d H:i:s').' '.$l.' '
        )
      ),
      $s
    );

    # get log width
    $left = $config['logwidth'];
    foreach ($s as $item) {
      # is this not a cut item
      if (!isset($item['cut']) || $item['cut'] === false) {
        # decrease the usable log width
        $left -= strlen(is_array($item) ? $item['text'] : $item);
      }
    }

    foreach ($s as $item) {
      # is this not a cut item
      if (!isset($item['cut']) || $item['cut'] === false) {
        $tmp .= is_array($item) ? $item['text'] : $item;
        # decrease the usable log width
        $left -= strlen(is_array($item) ? $item['text'] : $item);
      # cut item
      } else {
        # is the text lesser than or same as what is left, or the maximum left used
        $maxlength = strlen($item['text']) <= $left ? strlen($item['text']) : $left;
        $tmp .= substr($item['text'], 0, $maxlength);
        # remove used width
        $left -= $maxlength;
      }
    }
    $s = $tmp."\n";
  } else {
    $s = date('Y-m-d H:i:s').' '.$l.' '.$s."\n";
  }

  # is verbosity on and level is enough?
  if (
      $config['verbose'] &&
      $config['verbose'] >= $level
    ) {
    echo $s;
  }

  # is loglevel on and level is enough - the try to append to log
  if (
      $config['loglevel'] &&
      $config['loglevel'] >= $level &&
      $f = fopen($config['logfile'], 'a')
    ) {
    fwrite($f, $s);
    fclose($f);
  }

  return true;
}

# get argument options
$opts = getopt(
  'b:c:d:hi:l:m:o:wv:',
  array(
    'backup:',
    'config:',
    'config-write',
    'date:',
    'help',
    'input:',
    'line:',
    'linelimit:',
    'linewidth:',
    'minimumdiff:',
    'output:',
    'write',
    'verbose:',
    'loglevel:',
    'logfile:'
  )
);

# override default config if it has been set
if (isset($opts['config'])) {
  $config['config'] = $opts['config'];
}

# try to read global config
if (file_exists($config['config'])) {
  if (!$tmp = file_get_contents($config['config'])) {
    cl('Failed reading config file '.$config['config'].'.', VERBOSE_ERROR);
    die(1);
  }
  # strip config comments
  $tmp = explode("\n", $tmp);
  foreach ($tmp as $k => $v) {
      $tmp[$k] = preg_replace('/^\s*\#+.*$/', '',$v);
  }
  $tmp = implode("\n", $tmp);
  if (!$tmp = json_decode($tmp, true)) {
    cl('Failed JSON decoding config file '.$config['config'].'.', VERBOSE_ERROR);
    die(1);
  }
  $config = array_merge($config, $tmp);
}

# walk argument options
foreach ($opts as $opt => $value) {
  switch ($opt) {
    case 'b':
    case 'backup':
      $config['backup'] = (int)$value === 1;
      break;
    case 'c': # quantity of lines to check
    case 'linelimit':
      $config['linelimit'] = (int)$value;
      break;
    case 'linewidth': # line width limit
      $config['linewidth'] = (int)$value;
      break;
    case 'config':
      $config['config'] = strtotime($value);
      break;
    case 'config-write':
      # make json and indentation by 2
      $json_indented_by_4 = json_encode($config, JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT);
      $json_indented_by_2 = preg_replace('/^(  +?)\\1(?=[^ ])/m', '$1', $json_indented_by_4);
      file_put_contents($config['config'], $json_indented_by_2);
      cl('Writing config to '.$config['config'].'.', VERBOSE_INFO);
      die();
    case 'date':
      $config['date'] = strtotime($value);
      break;
    case 'h': # print help
    case 'help':
?>
Changelog appender

Usage: <?php echo basename(__FILE__)?> <options>

Options:
  -b <0/1>, --backup
    Turn backup on or off.
    Defaults to make backup named input.backup-date.

  -c <number>, --linelimit=<number>
    Sets the amount of lines to check.
    Defaults to 200.

  -d <date [time]>, --date="date [time]"
    Date and time to set on line.
    Defaults to current date and time.

  -i <file>, --input=<file>
    The file to edit.

  -h, --help
    Print this information.

  -l <line>, --line=<line>
    The line to add to the changelog in the file.
    Defaults to empty.

  --linewidth=<number>
    Sets line column width and make new lines when limit reached.
    Set to 0 to disable limitation.
    Defaults to 80 characters.

  --logfile=<file>
    Sets logfile.
    Defaults to /var/log/<?php echo basename(__FILE__) ?>.

  --loglevel=<0-4>
    Sets loglevel.
    0 = off, 1 = errors, 2 = info, 3-4 debug.
    Defaults to 0.

  -m <seconds>, --minimumdiff=<seconds>
    Minimum time in seconds between last changelog date and
    file modification date before it appends the file modification date
    to the changelog before the line to insert.
    Defaults to 15 minutes.

  -o <file>, --output=<file>
    File to output changes to.

  -w, --write
    Actually write the changes.
    Defaults to not writing changes.

  -v <0-4>, --verbose=<0-4>
    Sets verbosity level.
    0 = off, 1 = errors, 2 = info, 3-4 debug.
    Defaults to 1.
<?php
      die();
    case 'i': # file to work on
    case 'input':
      $config['input'] = $value;
      break;
    case 'l': # line to append to changelog
    case 'line':
      $config['line'] = $value;
      break;
    case 'logfile':
      $config['logfile'] = $value;
      break;
    case 'loglevel':
      $config['loglevel'] = (int)$value;
      break;
    case 'm': # minimum seconds in diff before appding file modification date
    case 'minimumdiff':
      $config['minimumdiff'] = $value;
      break;
    case 'o': # file to work on
    case 'output':
      $config['output'] = $value;
      break;
    case 'w':
    case 'write':
      $config['write'] = true;
      break;
    case 'v':
    case 'verbose':
      $config['verbose'] = (int)$value;
      break;
  }
}

# increment zero-starting line number and prefix with zeros
function linenrprefix($linenr, $linecount) {
  return str_pad($linenr + 1, strlen((string)$linecount), '0', STR_PAD_LEFT);
}

# make sure input file is set
if (!$config['input']) {
  cl('No input file specified.', VERBOSE_ERROR);
  die(1);
}

# make sure output file is set
if (!$config['output']) {
  cl('No output file specified.', VERBOSE_ERROR);
  die(1);
}

# make sure input file exists
if (!file_exists($config['input'])) {
  cl('Input file '.$config['input'].' does not exist.');
  die(1);
}

# open the input file
if (!$f = fopen($config['input'], 'r')) {
  cl('Error: failed opening '.$config['input'].'.');
  die(1);
}

# get the first x lines
# do it without head + grep to avoid potential uncacheable
# errors from head and reuse the read
$linenr = 0;
$lines = array();
while (($line = fgets($f)) !== false) {
  $lines[] = $line;
  $linenr++;
}

$linecount = $linenr;

if (!feof($f)) {
  cl('Failed reading '.$config['input']);
  die(1);
}

# close input file
fclose($f);

# make sure there are lines
if (!count($lines)) {
  cl('No lines in input file.', VERBOSE_DEBUG);
  die();
}

$append = array();
$appendcharacter = false; # false = new line, number, substring into line
$appendlinenr = false;
$appendmodtime = true;
$appendwrap = false;
$continue = true;
$lastdate = false;
$lastlinedateline = false;
$mime = mime_content_type($config['input']);
$appendlevel = 0;
$modtime = filemtime($config['input']);
$prefix = '';
$shebang = false;

cl('Input file: '.$config['input'].'.', VERBOSE_INFO);
cl('Output file: '.$config['output'].'.', VERBOSE_INFO);
cl('Backup file: '.($config['backup'] ? 'yes' : 'no').'.', VERBOSE_DEBUG);
cl('Write changes: '.($config['write'] ? 'yes' : 'no').'.', VERBOSE_DEBUG);
cl('MIME: '.$mime.'.', VERBOSE_DEBUG);
cl('Modified: '.date('Y-m-d H:i:s', $modtime).'.', VERBOSE_DEBUG);
cl('Line limit: '.$config['linelimit'].'.', VERBOSE_DEBUG);
cl('Line width: '.($config['linewidth'] !== 0 ? $config['linewidth'] : 'no').'.', VERBOSE_DEBUG);

# walk lines to find append point
foreach ($lines as $linenr => $line) {

  # check line limit
  if ($linenr + 1 >= $config['linelimit']) {
    cl('Reached '.$config['linelimit'].' lines limit, stopping.', VERBOSE_DEBUG);
    break;
  }

  # append level < 1, first line and this is a shebang?
  if (
    $appendlevel < 1 &&
    $linenr === 0 &&
    substr($line, 0, 2) === '#!'
  ) {
    $appendlevel = 1;
    cl(
      array(
        'L.'.linenrprefix($linenr, $linecount).' [level '.$appendlevel.']: shebang, "',
        array(
          'text' => trim($line),
          'cut' => true
        ),
        '"'
      ),
      VERBOSE_DEBUG
    );
    # is there a shebang, then begin after that, no append char but wrap needed
    $appendlinenr = 1;
    $appendcharacter = false;
    $appendwrap = true;
    $prefix = '#  ';
    continue;
  }

  # check mime
  switch ($mime) {
    case 'text/x-php':
    case 'text/x-shellscript':

      # append level levels:
      # 1 = shebang
      # 2 = php tag
      # 3 = changelog
      # 4 = changelog empty line
      # 4 = changelog datelines

      # append level < 2, no position found, this is PHP and a PHP opening tag
      # continue looking on same append level but keep append position
      # for possible use
      if (
        $appendlevel < 2 &&
        $mime === 'text/x-php' &&
        preg_match("/^.*<\?php.*$/i", $line)
      ) {
        $prefix = '#  ';
        $appendlinenr = $linenr;
        $appendcharacter = strpos($line, '<?php');
        $appendwrap = true;
        $prefix = '#  ';
        $appendlevel = 2;
        cl(array(
            'L.',
            linenrprefix($linenr, $linecount),
            ' [level ',
            $appendlevel,
            ']: PHP tag opening, : "',
            array(
              'text' => trim($line),
              'cut' => true
            ),
            '".'
          ),
          VERBOSE_DEBUG
        );
      }

      # append level < 3, changelog
      unset($matches);
      if (
        $appendlevel < 3 &&
        preg_match("/^\s*(\#*\s*)?changelog\s*$/i", $line, $matches)
      ) {

        # next line is append line, no append char and no wrap
        $appendlinenr = $linenr + 1;
        $appendcharacter = false;
        $appendwrap = false;
        $appendlevel = 3;

        cl(
          array(
            'L.',
            linenrprefix($linenr, $linecount),
            ' [level ',
            $appendlevel,
            ']: "changelog" found: "',
            array(
              'text' => $line,
              'cut' => true
            ),
            '".'
          ),
          VERBOSE_DEBUG_DEEP
        );

        # is there a prefix
        if (isset($matches[1])) {
          $prefix = $matches[1];
        }
        break;
      }

      # append level 3-4 + empty line after change log or date,
      # keep reading, a date may come afterwards
      if (
        ($appendlevel === 3 || $appendlevel == 4) &&
        (!strlen($line) || preg_match("/^\s*\#+\s*$/", $line))
      ) {
        $lastlinedateline = false;
        continue;
      }

      # append level < 4 + "# xxxx-xx-xx xx:xx:xx - possibly something"
      unset($matches);
      if (
        $appendlevel <= 4 &&
        preg_match(
          "/^\s*(?P<prefix>\#*\s*)?".
          "(?P<year>[\d|x]{4,})\-".
          "(?P<month>[\d|x]{2})\-".
          "(?P<day>[\d|x]{2})".
          "(\s+(?P<hour>[\d|x]{2,})\:".
          "(?P<minute>[\d|x]{2})".
          "(\:(?P<second>[\d|x]{2}))?)?.*.*$/i",
          $line,
          $matches
        )
      ) {

        # we are now in append level 4
        $appendlevel = 4;

        # remove non alphabetic keys from matches
        $matches = array_filter($matches, "is_string", ARRAY_FILTER_USE_KEY);

        # set prefix
        $prefix = isset($matches['prefix']) ? $matches['prefix'] : $prefix;

        $lastdate = false;
        # year-month-day
        if (
          isset($matches['year']) && is_numeric($matches['year']) &&
          isset($matches['month']) && is_numeric($matches['month']) &&
          isset($matches['day']) && is_numeric($matches['day']) &&
          checkdate($matches['month'], $matches['day'], $matches['year'])
        ) {

          $lastdate = $matches['year'].'-'.$matches['month'].'-'.$matches['day'];

          # hour-minute
          if (
            isset($matches['hour']) && is_numeric($matches['hour']) &&
            isset($matches['minute']) && is_numeric($matches['minute']) &&
            (int)$matches['hour'] >= 0 &&
            (int)$matches['hour'] <= 23 &&
            (int)$matches['minute'] >= 0 &&
            (int)$matches['minute'] <= 59
          ) {
            $lastdate .= ' '.$matches['hour'].':'.$matches['minute'];

            # second
            if (
              isset($matches['second']) && is_numeric($matches['second']) &&
              (int)$matches['second'] >= 0 &&
              (int)$matches['second'] <= 59
            ) {
              $lastdate .= ':'.$matches['second'];
            }
          }
        }

        # any unfilled positions in this date? then it is unusable
        if ($lastdate === false) {
          cl(
            array(
              'L.',
              linenrprefix($linenr, $linecount),
              ' [level ',
              $appendlevel,
              ']: dateline, unusable: "',
              array(
                'text' => trim($line),
                'cut' => true
              ),
              '".'
            ),
            VERBOSE_DEBUG_DEEP
          );
        } else {
          cl(
            array(
              'L.',
              linenrprefix($linenr, $linecount),
              ' [level ',
              $appendlevel,
              ']: dateline, usable: ',
              date('Y-m-d H:i:s', strtotime($lastdate)).', "',
              array(
                'text' => trim($line),
                'cut' => true
              ),
              '".'
            ),
            VERBOSE_DEBUG
          );
        }

        # append on next line
        $appendlinenr = $linenr + 1;
        $appendcharacter = false;
        $appendwrap = false;

        # last line was a date line
        $lastlinedateline = true;
        break;
      }

      # was last line a date line and there is an indented line?
      # then go next, this can go on for a while
      if (
        $appendlevel === 4 &&
        $lastlinedateline &&
        preg_match("/^\s*".preg_quote(trim($prefix))."+\s*.*$/", $line)
      ) {
        cl(
          array(
            'L.',
            linenrprefix($linenr, $linecount),
            ' [level ',
            $appendlevel,
            ']: dateline, possible continuation: ',
            array(
              'text' => trim($line),
              'cut' => true
            )
          ),
          VERBOSE_DEBUG
        );
        $appendlinenr++;
        break;
      }

      # obviously last line was not a date line
      $lastlinedateline = false;

      # append level 1 and passed dateline checks and so on
      if ($appendlevel === 4) {
        cl(
          array(
            'L.',
            linenrprefix($linenr, $linecount),
            ': read stop, unknown data found: "',
            array(
              'text' => trim($line),
              'cut' => true
            ),
            '".'
          ),
          VERBOSE_DEBUG
        );
        # something else, stop here
        $continue = false;
        break;
      }

  } # mime
  # for-each stopper
  if (!$continue) {
    break;
  }
}

if ($appendlinenr === false) {
  cl('No suitable append line nr found, exiting.', VERBOSE_INFO);
  exit;
}

# has last date been found?
if ($lastdate) {
  $lastdate = strtotime($lastdate);
  cl('Last changelog date: '.date('Y-m-d H:i:s', $lastdate), VERBOSE_DEBUG);
  $diff = $modtime - $lastdate;
  cl('Difference changelog and modification date: '.$diff.' s.', VERBOSE_DEBUG);
  # is date within interval?
  if ($diff < $config['minimumdiff']) {
    $appendmodtime = false;
  }
}

# should mod time be included in list?
if ($appendmodtime) {
  cl('Appending file modification date to changelog.', VERBOSE_DEBUG);
  $append[] = array(
    'prefix' => true,
    'line' => date('Y-m-d H:i:s', $modtime)
  );
} else {
  cl('Not appending file modification date to changelog.', VERBOSE_DEBUG);
}

# line width limitation
if ($config['linewidth'] !== 0) {
  $linetext = $config['line'];
  $i = 0;
  while (strlen($linetext)) {
    # the current part to append
    $linepart = '';
    # first line
    if ($i === 0) {
      # add date to current part
      $linepart = date('Y-m-d H:i:s', $config['date']);
    }

    # text left to add
    if (strlen($linetext)) {
      # first line - add separator, if not first line, add tab to current part
      $linepart .= $i === 0 ? ' - ' : '  ';
      # calculate length left of the line minus prefix, minus current line text
      $linespaceleft = $config['linewidth'] - strlen($prefix) - strlen($linepart);
      # no line space left even before adding something?

      if (
        # less than 0 space left, that is wrong
        $linespaceleft < 0 ||
        # passed beyond first line and still no left, also wrong
        ($linespaceleft === 0 && $i > 0)
      ) {
        cl('Fatal error, line width '.$config['linewidth'].' is too small, cannot fit line data within it.', VERBOSE_ERROR);
        die(1);
      # no space left but this is first line?
      } else if ($linespaceleft === 0 && $i === 0) {
        # add it, it contains date and so on
        $append[] = array(
          'prefix' => true,
          'line' => $linepart
        );
        # do not cut in line text
      # line space is left and whatever line
      } else {
        # add it, it contains date and so on
        $append[] = array(
          'prefix' => true,
          'line' => $linepart.substr($linetext, 0, $linespaceleft)
        );
        $linetext = substr($linetext, $linespaceleft);
      }
    }
    $i++;
  }
# no line width limitation
} else {
  # compose the actual line to append
  $append[] = array(
    'prefix' => true,
    'line' => date('Y-m-d H:i:s', $config['date']).(strlen($config['line']) ? ' - '.$config['line'] : '')
  );
}

# if wrapping is needed
if ($appendwrap === true) {
  # make some default lines
  switch ($mime) {
    case 'text/x-php':
      $append = array_merge(
        array(
          array(
            'prefix' => false,
            'line' => '<?php'
          ),
          array(
            'prefix' => true,
            'line' => 'changelog'
          )
        ),
        $append,
        array(
          array(
            'prefix' => false,
            'line' => '?>'
          )
        )
      );
      break;
    case 'text/x-shellscript':
      $append = array_merge(
        array(
          array(
            'prefix' => true,
            'line' => changelog
          )
        ),
        $append
      );
      break;
  }
}

cl('Prefix: "'.$prefix.'".', VERBOSE_DEBUG);
cl('Append line nr: '.($appendlinenr !== false ? $appendlinenr : 'none found').'.', VERBOSE_DEBUG);
cl('Append character nr: '.$appendcharacter.'.', VERBOSE_DEBUG);

# recalculate line count, if append character is on,
# then one existing line will be edited, reducing the
# number of lines edited
$linecount = $linecount + count($append) + ($appendcharacter !== false ? -1 : 0);

# make backup?
if ($config['backup']) {

  # find suitable backup name
  $i = '';
  do {
    $copytarget = $config['input'].'.backup-'.date('Y-m-d_His').$i;
    if (file_exists($copytarget)) {
      $i = is_numeric($i) ? $i + 1 : 1;
    }
  } while(file_exists($copytarget));

  # do backup
  cl('Backing up '.$config['input']. ' to '.$copytarget.'.', VERBOSE_INFO);
  if ($config['write']) {
    if (!copy($config['input'], $copytarget)) {
      cl('Error, failed doing backup of '.$config['input'].' to '.$copytarget.'.', VERBOSE_DEBUG);
      die(1);
    }
  }
}

# open file
cl('Opening file '.$config['output'].' for writing.', VERBOSE_INFO);
if ($config['write']) {
  if (!$f = fopen($config['output'], 'w')) {
      cl('Error, failed opening '.$config['output'], VERBOSE_ERROR);
      die(1);
  }
}

# walk lines
$linenrsadded = 0;

# run while within the quantity of lines
# or within the append line number
$linenr=0;
while ($linenr < count($lines) || $linenr <= $appendlinenr) {

  # still within lines range?
  $line = $linenr < count($lines) ? $lines[$linenr] : '';

  # line to append in?
  if ($linenr === $appendlinenr) {
    # append in character in line?
    if ($appendcharacter !== false) {

      # cut out beginning and end of the current line
      $begin = substr($line, 0, $appendcharacter);
      $end = substr($line, $appendcharacter);

      # walk the lines to append
      $appendcomposed = array();
      foreach ($append as $k => $v) {
        # prefix the line if necessary
        $appendline = ($v['prefix'] ? $prefix : '').$v['line'];

        # first append line?
        if ($k === 0) {

          # no line width or begin + line width ok, add it
          if ($config['linewidth'] === 0 || strlen($begin.$appendline) <= $config['linewidth']) {
            $appendcomposed[] = $begin.$appendline;
          # if not, make a separate line of begin and the append line
          } else {
            $appendcomposed[] = $begin;
            $appendcomposed[] = $appendline;
          }
        # last append line?
        } else if ($k === count($append) - 1) {
          # is begin + line within width, add it
          if (
            $config['linewidth'] === 0 ||
            strlen($appendline.$end) <= $config['linewidth']
          ) {
            $appendcomposed[] = $appendline.$end;
          # if not, make a separate line of it
          } else {
            $appendcomposed[] = $appendline;
            $appendcomposed[] = $end;
          }
        # some other append line
        } else {
          $appendcomposed[] = $appendline;
        }
      }

      # walk lines to append and do it
      foreach ($appendcomposed as $k => $appendline) {
        cl(
          array(
            'L.',
            linenrprefix($linenr + $linenrsadded, $linecount),
            '+: "',
            array(
              'text' => trim($appendline),
              'cut' => true
            ),
            '".'
          ),
          VERBOSE_DEBUG
        );
        if ($config['write']) {
          fputs($f, $appendline."\n");
        }
        # above merged append line 0 or append character is off
        if ($k > 0) {
          # increment lines added
          $linenrsadded++;
        }
      }
    # not appending on character
    } else {
      # walk regular append lines to append and do it
      foreach ($append as $k => $v) {
        $appendline = ($v['prefix'] ? $prefix : '').$v['line'];
        cl(
          array(
            'L.',
            linenrprefix($linenr + $linenrsadded, $linecount),
            '+: "',
            array(
              'text' => trim($appendline),
              'cut' => true
            ),
            '".'
          ),
          VERBOSE_DEBUG
        );
        if ($config['write']) {
          fputs($f, $appendline."\n");
        }
        # increment lines added
        $linenrsadded++;
      }
    }

    # not appending on character
    # and within range for original lines
    if (
      $appendcharacter === false &&
      $linenr < count($lines)
    ) {
      # then print original line afterwards
      cl(
        array(
          'L.',
          linenrprefix($linenr + $linenrsadded, $linecount),
          '+: "',
          array(
            'text' => trim($line),
            'cut' => true
          ),
          '".'
        ),
        VERBOSE_DEBUG
      );
      if ($config['write']) {
        fputs($f, $line);
      }
    }
  } else {
    # write regular line
    cl(
      array(
        'L.',
        linenrprefix($linenr + $linenrsadded, $linecount),
        ' : "',
        array(
          'text' => trim($line),
          'cut' => true
        ),
        '".'
      ),
      VERBOSE_DEBUG_DEEP
    );
    if ($config['write']) {
      fputs($f, $line);
    }
  }

  $linenr++;
}

# close file
if ($config['write']) {
  fclose($f);
}

?>
