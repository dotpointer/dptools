#!/usr/bin/php
<?php

# phpdircheck
# php lint check a directory recursively and stop if any errors occur
# by robert klebe, dotpointer

# example bash file which checks php files before publishing data to a web root:
#
# phpdircheck $SOURCE
# if [ $? -eq 0 ]; then
#	echo "Publishing data: $SOURCE -> $TARGET";
#        # sync the source with the target, */=recursive, note that we must specify folder excludes first for some reason
#	 rsync -av --exclude='subdomains' --include='*/' --include='*.map' --include='*.po' --include='*.mo' --include='*.png' --include='*.html' --include='*.ttf' --include='*.eot' --include='*.svg' --include='*.woff' --include='*.jpg' --include='*.gif' --include='*.ico' --include='*.swf' --include='*.php' --include='*.css' --include='*.js' --include='robots.txt' --exclude='*' $SOURCE $TARGET
# fi

# changelog
# 2013-11-02 14:34 - initial version
# 2014-10-22 22:39 - cleanup
# 2014-10-22 22:46:33
# 2015-09-02 18:29:02 - cleanup and bugfix
# 2016-09-21 20:38:18 - adding progressbar
# 2016-09-21 21:31:02 - updated progressbar
# 2017-02-04 23:11:00 - updated progressbar
# 2018-06-29 14:56:00 - cleanup
# 2018-06-29 15:13:56
# 2018-07-19 19:29:32 - indentation change, tab to 2 spaces
# 2022-02-23 12:07:00 - adding -a, -g, -gp, -h
# 2023-03-30 15:07:00 - bugfix, change to repository root directory on -g/-gp

$animnow = -1;
function progressbar($part, $errors, $total) {
  global $animnow;
  # character length for progress bar
  $anim = array('|', '/', '-', '\\');
  $pb_length = 10;

  # calculate the part
  $pb_part = round( ($part > 0 && $total > 0) ? ($part/$total) * $pb_length : 0);
  # calculate the total
  $pb_total = $pb_length;

  $animnow = $animnow < count($anim) - 1 ? $animnow + 1 : 0;

  return
    '['.
    str_repeat('#', ($part < $total && $pb_part > 0) ? $pb_part - 1 : $pb_part ).

    ($part < $total && $pb_part > 0 ? $anim[$animnow] : '').

    str_repeat('.', $pb_total - $pb_part).
    '] '.
    # the first number is the actual amount of characters in the
    # resulting string, and we want 000.000, so that's 7
    sprintf("%07.3f", ($part > 0 && $total > 0) ? ($part / $total) * 100 : 0, 1).
    '% '.
    str_pad($part, strlen($total), '0', STR_PAD_LEFT).
    '/'.
    str_pad($errors, strlen($total), '0', STR_PAD_LEFT).
    '/'.
    $total.
    ' '
    ;
}

$argv1 = isset($argv[1]) ? $argv[1] : '.';
$continue = false;

for ($i=0; $i < $argc; $i++) {
  if ($argv[$i] === '-c') {
    $continue = true;
    break;
  }
}

if (in_array($argv1, array('-g', '-gp'))) {
  $c = 'git rev-parse --show-toplevel';
  exec($c, $o, $r);
  if ($r !== 0) {
    echo 'Failed: '.$c."\n";
    exit(2);
  }
  $path = $o[0];
  echo 'Git root directory: '.$path."\n";
  if (!is_dir($path)) {
    echo 'Git directory '.$path.' does not exist.'."\n";
    exit(2);
  }
  if (!chdir($path)) {
    echo 'Could not change directory to '.$path.'.'."\n";
    exit(2);
  }
}

# git repo - all files
if ($argv1 === '-g') {
  $c = 'git ls-tree --full-tree -r --name-only HEAD';
  exec($c, $files, $r);
  if ($r !== 0) {
    echo 'Failed: '.$c."\n";
    exit(2);
  }
  if (!count($files)) {
    echo 'No files found.'."\n";
    exit(2);
  }
# git diff - modified files
} else if ($argv1 === '-gp') {
  $c = 'git status --porcelain';
  exec($c, $files, $r);
  if ($r !== 0) {
    echo 'Failed: '.$c."\n";
    exit(2);
  }
  if (!count($files)) {
    echo 'No files found.'."\n";
    exit(2);
  }
  foreach ($files as $k => $v) {
    $files[$k] = substr($v, 3);
  }

# help
} else if (in_array($argv1, array('-h', '--help'))) {
?>Usage: <?php echo basename(__FILE__) ?> <directory|options>

Options:
-a
  Check all files in the current directory, not only .php files

-g
  Check all files in a git repository in the current directory
  (git ls-tree --full-tree -r --name-only HEAD)

-gp
  Check modified files in a git repository in the current directory
  (git diff --porcelain)

-h, --help
  Print this information
<?php
  exit(1);

# -a or path
} else {

  if ($argv1 === '-a') {
    $path = '.';
  } else {
    $path = $argv1;
  }
  if (!file_exists($path) || !is_dir($path)) {
    echo 'Directory does not exist: '.$path."\n";
    exit(1);
  }
  # set working dir
  chdir($path);

  # do a find on the dir
  $cmd = 'find '.escapeshellarg($path).($argv1 === '-a' ? '' : ' -iname "*.php"');
  $files = shell_exec($cmd);
  if (!$files) {
    echo 'No files found.'."\n";
    exit(2);
  }
  # split the lines by newline
  $files = explode("\n", trim($files));
}

$total = count($files);
$l = strlen((string)$total);
echo 'PHP Lint-checking '.$total.' files'."\n";

# walk files
$errors = 0;
$prevfile = '';
$lastline = '';
foreach ($files as $nr => $file) {
  if (file_exists($file)) {
    unset($o, $r);
    $cmd = 'php -l '.escapeshellarg($file);
    exec($cmd, $o, $r);
    if ($r) {
      $errors++;
      # blank previous line
      echo str_repeat(' ', strlen($lastline))."\r";
      echo 'Fail '.str_pad($errors, strlen($total), '0', STR_PAD_LEFT).': '.$file."\n";
      echo (is_array($o) ? trim(implode("\n", $o)) : $o)."\n\n";
      if (!$continue) {
        exit(3);
      }
    }
  }
  # blank previous line
  echo str_repeat(' ', strlen($lastline))."\r";

  # write status
  $lastline = progressbar($nr + 1, $errors, $total).' checked: '.$file."\r";
  echo $lastline;
  $prevfile = $file;
}

# blank previous line
echo str_repeat(' ', strlen($lastline))."\r";

# write status
echo progressbar($nr + 1, $errors, $total).' check completed'."\r\n";

exit($errors);
?>
