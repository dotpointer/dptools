#!/bin/bash

# to unmount a encrypted backup image over samba or sshfs
# by robert klebe

# changelog
# 2014-11-05 14:43:27 - initial version
# 2015-06-06 12:38:51 - updated version for dptools
# 2018-06-28 15:53:00 - cleanup
# 2018-07-19 19:29:29 - indentation change, tab to 2 spaces
# 2018-10-05 00:00:00 - adding checks for mounted status
# 2019-04-08 00:04:00 - adding init info
# 2019-06-16 00:52:00 - adding sshfs support

# script info for when script is linked in /etc/rc0.d
### BEGIN INIT INFO
# Provides:          backup-umount
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Unmounts encrypted backup image over Samba.
# Description:       Unmounts encrypted backup image over Samba.
### END INIT INFO

# credentials
DIR_IMAGE="/mnt/backupimage/";
DIR_SHARE="/mnt/backupshare/";
LOOPDEVICE="/dev/loop0";
MAPPERNAME="backuploop";
VERBOSE=0;

CONFIG_FILE="/etc/dptools/backuptools";

if [ ! -f "$CONFIG_FILE" ]; then
  echo "Error, missing configuration file: $CONFIG_FILE";
  exit 1;
fi

source $CONFIG_FILE;

# verbosity override
if [ "$1" == "-v" ] || [ "$1" == "--verbose" ]; then
  VERBOSE=1;
fi

# Make sure only root can run our script
if [[ $EUID -ne 0 ]]; then
   echo "Error, this script must be run as root";
   exit 1;
fi

if [[ $(findmnt -M "$DIR_IMAGE") ]]; then
  # unmount the image dir
  if [ $VERBOSE -eq 1 ]; then
    echo "Unmounting image dir: $DIR_IMAGE";
  fi
  umount $DIR_IMAGE;
  if [[ $? != 0 ]]; then
    echo "Error, failed unmounting image dir: $DIR_IMAGE";
    exit 1;
  fi
elif [ $VERBOSE -eq 1 ]; then
  echo "Skipping image dir $DIR_IMAGE unmount, not mounted";
fi

if [ -L "/dev/mapper/$MAPPERNAME" ]; then
  # close the luks mapping
  if [ $VERBOSE -eq 1 ]; then
    echo "Closing LUKS mapper: /dev/mapper/$MAPPERNAME";
  fi
  cryptsetup luksClose /dev/mapper/$MAPPERNAME
  if [[ $? != 0 ]]; then
    echo "Error, failed closing LUKS mapper: /dev/mapper/$MAPPERNAME";
    exit 1;
  fi
elif [ $VERBOSE -eq 1 ]; then
  echo "Skipping LUKS mapper /dev/mapper/$MAPPERNAME close, not open"
fi

# check for matching loop device
LOOPDEVICEFOUND=$(losetup -l|grep $LOOPDEVICE)
if [ ! -z "$LOOPDEVICEFOUND" ]; then
  # delete the loop device
  if [ $VERBOSE -eq 1 ]; then
    echo "Deleting loop device: $LOOPDEVICE";
  fi
  losetup -d $LOOPDEVICE
  if [[ $? != 0 ]]; then
    echo "Error, failed deleting loop device: $LOOPDEVICE";
    exit 1;
  fi
elif [ $VERBOSE -eq 1 ]; then
  echo "Skipping loop device $LOOPDEVICE deletion, not listed"
fi

if [[ $(findmnt -M "$DIR_SHARE") ]]; then
  # unmount the share dir
  if [ $VERBOSE -eq 1 ]; then
    echo "Unmounting share dir: $DIR_SHARE";
  fi
  if [ $CONNECTION_TYPE == "sshfs" ]; then
    fusermount -uz $DIR_SHARE
  else
    umount $DIR_SHARE
  fi
  if [[ $? != 0 ]]; then
    echo "Error, failed unmounting dir: $DIR_SHARE";
    exit 1;
  fi
elif [ $VERBOSE -eq 1 ]; then
  echo "Skipping share dir $DIR_SHARE unmount, not mounted";
fi

# tell that it went fine
echo "Backup image $DIR_IMAGE and share $DIR_SHARE closed";
