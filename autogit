#!/usr/bin/php
<?php

# autogit - automatically initiate, stage and make commits to a git repository
# by Robert Klebe, dotpointer

# changelog
# 2019-02-14 00:00:00 - initial version
# 2019-02-17 16:34:00 - adding commit message option
# 2019-06-12 20.58:00 - bugfix, help did not show filename and continued execution, updating description

# to run commands and return various output formats
function run($c, $opts = false) {

  $opts = is_array($opts) ? $opts : array();

  $opts['failexit'] = isset($opts['failexit']) ? $opts['failexit'] : true;
  $opts['failwarn'] = isset($opts['failwarn']) ? $opts['failwarn'] : true;
  $opts['return'] = isset($opts['return']) ? $opts['return'] : 'exitcode';
  $opts['interactive'] = isset($opts['interactive']) ? $opts['interactive'] : false;

  if ($opts['interactive']) {
    $descriptorspec = array(
       0 => array('file', '/dev/tty', 'r'),
       1 => array('file', '/dev/tty', 'w'),
       2 => array('file', '/dev/tty', 'w'),
       3 => array('pipe', 'w'), // stderr is a pipe that the child will write to
    );
    $c = $c.";echo $? >&3";
    $proc = proc_open($c, $descriptorspec, $pipes);
    $output = array();

    # read exit code pipe
    if (!feof($pipes[3])) {
      $output['exitcode'] = rtrim(fgets($pipes[3],5),"\n");
    }

    fclose($pipes[3]);
    # this waits for the process to quit
    proc_close($proc);
    $r = (int)$output['exitcode'];
    $o = array();
  } else {
    unset($o, $r);
    exec($c, $o, $r);
  }

  if ($r !== 0) {
    if ($opts['failwarn']) {
      echo 'Failed '.$c.', '.implode(" ", $o).' ('.$r.')'."\n";
    }
    if ($opts['failexit']) {
      die($r);
    }
  }

  switch ($opts['return']) {
    default:
    case 'exitcode':
      return $r;
    case 'output':
      return $o;
    case 'outputfirstline':
      return isset($o[0]) ? trim($o[0]) : '';
    case 'outputnewlined':
      return implode("\n", $o);
    case 'outputspaced':
      return implode(" ", $o);
  }
}

# die on fail
function fail($text, $code = 1) {
  echo $text;
  die($code);
}

# output
function cl($text) {
  global $verbose;
  if (!$verbose) {
    return false;
  }
  echo date('Y-m-d H:i:s').' '.$text."\n";
}

# default options
$commitmessage = '{gsp-c}';
$dir = getcwd();
$verbose = false;

$opts = getopt('dhm:v', array('dir:', 'help', 'verbose'));

# check options
foreach ($opts as $key => $value) {
  switch ($key) {
    default:
      fail('Unknown option: '.$key);
      break;
    case 'd:':
    case 'dir':
      $dir = realpath($value);
      if (!is_dir($dir)) {
        fail('Working directory '.$dir.' does not exist');
      }
      break;
    case 'h':
    case 'help':
?>
Usage: <?php echo basename(__FILE__); ?> <options>

Options:
  -m <msg>
    Set commit message, defaults to "git status --porcelain".
    Placeholders for the message:
      {gs}    git status.
      {gsp}   git status --porcelain.
      {gsp-c} git status --porcelain with C-slashes stripped.
          This prints out special characters with octal notation.
      \n      newline.
      \t      tab.
    Message defaults to {gsp-c}.
  -d <dir>, --dir=<dir>
    Set working directory, defaults to current working directory.
  -h, --help
    Print this help.
  -v, --verbose
    Be verbose
<?php
      die();
    case 'm':
      $commitmessage = $value;
      break;
    case 'v':
    case 'verbose':
      $verbose = true;
      break;
  }
}

# wd is not the target and (chdir to it or wd is not the target)
if (getcwd() !== $dir && (!chdir($dir) || getcwd() !== $dir)) {
  fail('Working directory could not be set to '.$dir);
}

cl('Working directory is '.$dir);

# no git dir, try to make it
if (!is_dir('.git')) {
    cl('Initiating git repository');
  $c = 'git init';
  $e = run($c);
  if ($e !== 0) {
    fail('Failed '.$c.', exit code: '.$e);
  }
}

cl('Retrieving status');

$c = 'git status --porcelain';
$gitstatusporcelain = trim(run($c, array('return' => 'outputnewlined')));

# changes exist
if (strlen($gitstatusporcelain)) {

  # commit message keyword replacements
  $replacements = array(
    '{gs}' => '',
    '{gsp}' => $gitstatusporcelain,
    '{gsp-c}' => stripcslashes($gitstatusporcelain),
    '\n' => "\n",
    '\t' => "\t",
    '\{gs\}' => '{gs}',
    '\{gsp\}' => '{gsp}',
    '\{gsp-c\}' => '{gsp-c}'
  );

  # is {gs} present in the message
  if (strpos($commitmessage, '{gs}') !== false) {
    # then request status
    $c = 'git status';
    $replacements['{gs}'] = trim(run($c, array('return' => 'outputnewlined')));
  }

  # replace placeholders in commit message
  $commitmessage = str_replace(
    array_keys($replacements),
    array_values($replacements),
    $commitmessage
  );

  # stage all changes
  cl('Staging all changes');
  $c = 'git add -A';
  $e = run($c);
  if ($e !== 0) {
    fail('Failed '.$c.', exit code: '.$e);
  }

  # commit changes
  cl('Committing all changes');
  $c = 'git commit -m '.escapeshellarg($commitmessage);
  $e = run($c);
  if ($e !== 0) {
    fail('Failed '.$c.', exit code: '.$e);
  }
} else {
  cl('No changes noted');
}
?>
