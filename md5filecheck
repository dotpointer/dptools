#!/usr/bin/php
<?php

# md5 file sums file checker
# by robert klebe, dotpointer

# create list by md5deep -r -e -l -of * > files.md5

# changelog
# 2019-05-17 20:37:00 - initial version
# 2019-05-17 22:11:00 - output corrections
# 2019-05-17 23:20:54 - updating output
# 2019-07-14 04:26:00 - bugfix, file names with spaces were missed
# 2019-07-14 15:59:00 - adding options, adding error log output

$fileerror = false;

# open a log file if not already open, then append text to it
function logtext(&$filepointer, $file, $text) {
	# file not already opened
	if (!$filepointer) {
		# file not set get out
		if (!$file) return;
		# try to open file, put pointer to the beginning of it
		$filepointer = fopen($file, 'w+');
		if (!$filepointer) {
			echo 'Failed opening log file '.$file."\n";
			die(1);
		}
	}
	# write the text to the file
	fputs($filepointer, $text);
}

# get header
function getheader($i, $linecount, $stats, $text) {
  return '['.
    str_pad($i, strlen($linecount), ' ', STR_PAD_LEFT).'/'.$linecount.' '.
    str_pad(round($i / $linecount *  100), 3, ' ', STR_PAD_LEFT).'% '.
    str_pad($stats['ok'], strlen($linecount), ' ', STR_PAD_LEFT).' OK '.str_pad($stats['mismatch'], strlen($linecount), ' ', STR_PAD_LEFT).' mismatch '.str_pad($stats['missing'], strlen($linecount), ' ', STR_PAD_LEFT).' missing'.
    '] '.$text;
}

$errorlog = false;
$file = false;
$fileerror = false;

foreach (getopt('e:hi:', array('errorlog:', 'help', 'input:')) as $opt => $value) {
	switch ($opt) {
		case 'i':
		case 'input':
			$file = $value;
			break;
		case 'e':
		case 'errorlog':
			$errorlog = $value;
			break;
		case 'h':
		case 'help':
?>
Usage: <?php echo basename(__FILE__); ?> <options>
Options:
	-e/--errorlog <filename>
		Print errors to this file.
	-h, --help
		Print this help
	-i/--input <filename>
		Read checksums from this file (required).
<?php
			die();
	}
}

if (!strlen($file)) {
  echo 'Please specify md5 file sum file with -i.'."\n";
  die(1);
}


if (!file_exists($file)) {
  echo 'File not found: '.$file."\n";
  die(1);
}

# count lines
$file=$file;
$linecount = 0;
$f = fopen($file, "r");
if (!$f) {
  echo 'Failed opening: '.$file."\n";
  die(1);
}

# calculate lines
while(!feof($f)){
  $line = fgets($f, 4096);
  $linecount = $linecount + substr_count($line, PHP_EOL);
}

if (!rewind($f)) {
  echo 'Failed rewinding '.$file."\n";
  fclose($f);
  die(1);
}

#
$i=0;
$stats = array(
  'mismatch' => 0,
  'missing' => 0,
  'ok' => 0
);

# loop files
while ($line = fgets($f)) {
  $i++;
  $line = $line;
  preg_match('/([a-zA-Z0-9]+)  (.*)\r?\n?/', $line, $matches);

  if (!isset($matches[1], $matches[2])) {
    echo 'Failed splitting line '.$i."\n";
    continue;
  }

  $md5 = $matches[1];
  $path = realpath($matches[2]);
  $filesize = filesize($path);

  $header = getheader($i, $linecount, $stats, 'MD5-summing '.$path.' '.$filesize.' b');
  echo $header."\r";

  if (!file_exists($path)) {
    $currentstatus = 'MISSING';
    $stats['missing']++;
  } else {
    if (md5_file($path) === $md5) {
      $stats['ok'] ++;
      $currentstatus = 'OK';
    } else {
      $stats['mismatch'] ++;
      $currentstatus = 'MISMATCH';
    }
  }
  # clear previous line
  echo str_repeat(' ', strlen($header))."\r";
  # print result
  $header = getheader($i, $linecount, $stats, $currentstatus.' '.$path."\n");

  if ($currentstatus !== 'OK' && $errorlog !== false) {
	logtext($fileerror, $errorlog, $header);
  }
}

fclose($f);
if ($fileerror) fclose($fileerror);
?>
