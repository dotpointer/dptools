#!/usr/bin/php
<?php

# photos2
# move and resize photos from memory cards, useful for auctioning photos
# by robert klebe, dotpointer

# changelog
# 2013-09-23 - first version in bash
# 2013-10-18 - second version in php, 5-group separation, userfriendly naming, more checks, working directly to SD card
# 2013-10-22 - bugfix, photos were not a-z sorted and were not 5 in each folder
# 2014-06-14 - setting default timezone
# 2015-05-27 18:19:23 - adding empty directory cleanup
# 2015-09-02 17:46:27 - imagemagick check
# 2018-06-29 14:42:00 - cleanup
# 2018-06-29 17:27:18
# 2018-07-19 19:29:32 - indentation change, tab to 2 spaces
# 2018-12-16 12:56:00 - adding partly support for win

$OS = strtolower(PHP_OS);

# to clean an empty directory from folders
function clear_empty_directories($path) {
  $deleteddirs = 0;
  do {
    $deleted_a_dir = false;
    # get a list of empty directories
    $cmd = 'find '.escapeshellarg($path).' -type d -empty';
    $dirs = shell_exec($cmd);
    if ($dirs === false) die('Could not do find.');
    $dirs = explode("\n", $dirs);
    var_dump($dirs);
    foreach ($dirs as $dir) {
      if (
        file_exists($dir) &&
        is_dir($dir) &&
        !in_array(basename($dir), array('.', '..')) &&
        $dir !== $path
      ) {
        $deleteddirs++;
        echo "Deleting empty directory: ".$dir."\n";
        rmdir($dir);
        $deleted_a_dir = true;
        continue;
      }
    }
  } while ($deleted_a_dir);
}

if (!in_array($OS, array('linux', 'win'))) {
  echo 'OS not supported.'."\n";
  die(1);
}

# determine slash type
$SLASH = $OS === 'linux' ? '/' : '\\';

# php whine about timezone if we don't set it
date_default_timezone_set("Europe/Stockholm");

if ($OS === 'linux') {
  define('CONVERT_PATH', '/usr/bin/convert');
} else if ($OS === 'win') {
  # need to find imagemagick
  die();
}


if (!file_exists(CONVERT_PATH)) {
  if ($OS === 'linux') {
    echo 'Could not find '.CONVERT_PATH.'. Try to install it: apt-get install imagemagick'."\n";
    die();
  } else {
    echo 'Could not find '.CONVERT_PATH.'. Try to install it.'."\n";
    die();
  }
}

if ($OS === 'linux') {
  # get ourselves
  $cmd = 'whoami';
  $o = array();
  exec($cmd, $o, $r);
  $whoami = isset($o[0]) ? $o[0] : '';
  if ($r !== 0 || !strlen($whoami)) die('Failed extracting username: '.$cmd."\n");

  if ($whoami === 'root') {
    echo 'WARNING! You are running as ROOT, this may not work.'."\n";
  }
}

if ($OS === 'linux') {
  # get the desktop path
  $cmd = '/usr/bin/xdg-user-dir DESKTOP';
  $desktopdir = exec($cmd, $o, $r);

  # make sure we have desktop dir
  if ($r !== 0 || !file_exists($desktopdir) || !is_dir($desktopdir)) {
    echo 'Failed extracting desktop dir: '.$cmd."\n";
    die();
  }
} else if ($OS === 'win') {
  $desktopdir = '%USERPROFILE%\Desktop';

  if (!file_exists($desktopdir) || !is_dir($desktopdir)) {
    echo 'Failed finding desktop dir: '.$desktopdir."\n";
    die();
  }
}

# path to the target dir
$targetdir = $desktopdir.$SLASH.'Kamerabilder'.$SLASH;
$targetrootdir = $targetdir;

# make sure target dir exists
if (!file_exists($targetdir)) {
  # make sure the target dir exists
  $o = array();
  echo 'Creating '.$targetdir."\n";
  $cmd = 'mkdir -p '.escapeshellarg($targetdir);
  exec($cmd, $o, $r);
  if ($r !== 0) {
    die('Failed making target root dir: '.$cmd."\n");
  }
  chmod($targetdir, 0777);
} else if (!is_dir($targetdir)) {
  die('Target root dir is not a dir: '.$targetdir);
}

# path to photos
$srcdir = $SLASH.'media'.$SLASH.$whoami.$SLASH.'CANON_DC'.$SLASH;
if (!file_exists($srcdir) || !is_dir($srcdir)) {
  # clear the directory from empty dirs
  clear_empty_directories($targetrootdir);
  die('Source folder does not exist: '.$srcdir."\n");
}

#  find all files on src, make a list
$o = array();
$cmd = 'find '.escapeshellarg($srcdir).' -type f \( -iname "*.jpg" -o -iname "*.jpeg" \)';
exec($cmd, $o, $r);
$files = $o;
if ($r !== 0) {
  die('Failed finding source files: '.$cmd."\n");
}


# make sure there were source files
if (!count($files)) {
  # clear the directory from empty dirs
  clear_empty_directories($targetrootdir);
  die('No files on target'."\n");
}
sort($files);

# path to the target dir + Y-m-d H.i.s
$targetdir = $targetdir.date('Y-m-d H.i.s').$SLASH;

if (!file_exists($targetdir)) {
  # make sure the target dir exists
  $o = array();
  $cmd = 'mkdir -p '.escapeshellarg($targetdir);
  exec($cmd, $o, $r);
  if ($r !== 0) {
    die('Failed making target root dir: '.$cmd."\n");
  }
  chmod($targetdir, 0777);
} else if (!is_dir($targetdir)) {
  die('Target root dir is not a dir: '.$targetdir."\n");
}

# make the target dir folder
$o = array();
$cmd = 'mkdir -p '.escapeshellarg($targetdir);
exec($cmd, $o, $r);
if ($r !== 0 || !file_exists($targetdir)) {
  die('Failed making target dir: '.$cmd."\n");
}
chmod($targetdir, 0777);
# subfolder nr
$subnr = 0;

# file nr
$filenr = 0;

# set subdir to targetdir just in case
$targetsubdir = false;

# walk the files in source dir
foreach ($files as $file) {
  echo "------------------------------------------------\n";
  echo 'Working '.$file."\n";

  if (!file_exists($file)) {
    continue;
  }

  if (strpos($file, 'Trash')) {
    continue;
  }
  # extract basename, /bla/bla/file.jpg -> file.jpg
  $name = basename($file);

  $dirtest1 = substr($file, 0, strlen($srcdir));
  $dirtest2 = $srcdir;
  # maker sure we are in src dir, make sure it is .jpg/.jpeg in filename
  if ($dirtest1 !== $dirtest2) {
    echo 'Folders do not match:'.$dirtest1. ' !== '.$dirtest2."\n";
    continue;
  }

  $ext = strtolower(substr($name, strrpos($name, '.') + 1, strlen($name)));

  if (!in_array($ext, array('jpg', 'jpeg'))) {
    echo 'Bad file extension: '.$ext."\n";
    continue;
  }

  # is this file no 1, 6, 12, 18, 24...
  if ($filenr === 0 || $filenr % 5 === 0) {
    $subnr += 1;
    $targetsubdir = $targetdir . 'Auktion-'.$subnr . $SLASH;
    # make the target dir folder
    $o = array();
    $cmd = 'mkdir -p '.escapeshellarg($targetsubdir);
    exec($cmd, $o, $r);
    if ($r !== 0 || !file_exists($targetsubdir)) {
      die('Failed making target dir: '.$cmd."\n");
    }
    chmod($targetsubdir, 0777);

  }

  # increment file nr
  $filenr += 1;

  # extract basename without ending, file.jpg -> file
  # $name = substr($name, 0, strpos($name, '.'));

  # add _1024x768 if not there, to be compatible with gallery
  # if (strpos($name, '_1024x768') === false) {
  # 	$name .= '_1024x768';
  # }

  $name = 'Bild-'.$filenr;
  $targetfile = $targetsubdir.$name.'.jpg';
  echo 'Outputting data to '.$targetfile."\n";

  # run convert on it the fastest way
  $o = array();
  # 30 is too low
  # 50 ?
  # 100 gives 2,7 MB files
  # 95 gives 1 MB files
  # 90 gives 700 kB files
  $cmd = CONVERT_PATH.' '.escapeshellarg($file).' -quality 90 -auto-orient -strip -sample 2048x1536 '.escapeshellarg($targetfile);
  exec($cmd, $o, $r);
  if ($r === 0 && file_exists($targetfile)) {
  chmod($targetfile, 0777);
    # remove source file - IDFC_IMG.JPG
    unlink($file);
  echo 'Deleting '.$file."\n";
  } else {
    echo 'Failed making resize: '.$cmd."\n";
  }
}

clear_empty_directories($targetrootdir);

?>
