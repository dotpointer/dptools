#!/usr/bin/php
<?php

# changelog
# 2018-07-13 19:31:17 - first version
# 2018-07-15 22:17:49 - logging
# 2018-07-18 19:06:00 - editing inclusion/exclusion, adding actions
# 2018-07-18 21:32:00 - adding copy preserve, review and delete actions
# 2018-07-19 18:14:00 - bugfix, unknown files missed space in prefix name

# verbosity levels
define('VERBOSE_OFF', 0);    # no info at all
define('VERBOSE_ERROR', 1);    # only errors
define('VERBOSE_INFO', 2);    # above and things that changes
define('VERBOSE_DEBUG', 3);    # above and verbose info
define('VERBOSE_DEBUG_DEEP', 4);    # above and exec outputs

# default config
$config = array(
  'action' => false,
  'backup' => true,
  'config' => '/etc/dptools/'.basename(__FILE__),
  'path' => getcwd(),
  'includeextensions' => array(
    'css',
    'htm',
    'html',
    'js',
    'php',
    'txt'
  ),
  'includemimes' => array(
    'text/plain',
    'text/shellscript',
    'text/x-php'
  ),
  'expandlist' => 'expandlist.txt',
  'ignorenames' => array(
    '.min.',
    '/.git/',
    '/base.php',
    '/base2.php',
    '/base3.php',
    '/exporting.js',
    '/fonts/',
    '/highcharts.js'
  ),
  'ignoremimes' => array(
    'image/',
    'audio/',
    'video/'
  ),
  'logfile' => '/var/log/'.basename(__FILE__),
  'loglevel' => VERBOSE_OFF,
  'write' => false,
  'verbose' => VERBOSE_INFO,
);

# debug printing
function cl($s, $level=1) {
    global $config;

  # find out level of verbosity
  switch ($level) {
    case VERBOSE_ERROR:
      $l = 'E';
      break;
    case VERBOSE_INFO:
      $l = 'I';
      break;
    case VERBOSE_DEBUG:
    case VERBOSE_DEBUG_DEEP:
      $l = 'D';
      break;
  }

  $s = date('Y-m-d H:i:s').' '.$l.' '.$s;
  $sublines = array();
  $i=0;
  $textleft = $s;
  if (
    isset($config['logwidth']) &&
    $config['logwidth'] > 0
  ) {
    # run while there is text left
    while (strlen($textleft)) {
      # is this first loop turn
      if ($i === 0) {
        # no indent, take whole line to limit
        $indent = '';
        $sublines[] = substr($textleft, 0, $config['logwidth']);
        $textleft = substr($textleft, $config['logwidth']);
      } else {
        # make space for indent and add the left
        $indent = str_repeat(' ', $config['logwidth'] > 2 ? 2 : $config['logwidth'] - 1);
        $sublines[] = $indent.substr($textleft, 0, $config['logwidth'] - strlen($indent));
        $textleft = substr($textleft, $config['logwidth'] - strlen($indent));
      }
      $i++;
    }
    $s = implode("\n", $sublines);
  }
  $s = $s."\n";

  # is verbosity on and level is enough?
  if (
      $config['verbose'] &&
      $config['verbose'] >= $level
    ) {
    echo $s;
  }

  # is loglevel on and level is enough - the try to append to log
  if (
      $config['loglevel'] &&
      $config['loglevel'] >= $level &&
      $f = fopen($config['logfile'], 'a')
    ) {
    fwrite($f, $s);
    fclose($f);
  }

  return true;
}

# copy with rights by using the system copy command
function copy_preserve($src, $dst) {
  unset($c, $o, $r);
  $c = 'cp --preserve '.escapeshellarg($src).' '.escapeshellarg($dst);
  exec($c, $o, $r);
  if ($r !== 0) {
    cl('Failed copying "'.$src.'" to "'.$dst.'": '.implode(" ", $o).' ('.$r.')', VERBOSE_ERROR);
    die(1);
  }
  return true;
}

function extractpath($file) {
  if (!file_exists($file)) {
    cl('Resource not found "'.$file.'".', VERBOSE_ERROR);
  }

  if (!$tmp = realpath($file)) {
    cl('Failed extracting path "'.$file.'".', VERBOSE_ERROR);
  }
  $file = $tmp;

  if (!file_exists($file)) {
    cl('Extracted resource path not found "'.$file.'".', VERBOSE_ERROR);
  }
  return $file;
}

# check if file has tabs
function hastabs($file) {
  # run command
  unset($c, $o, $r);
  $c = 'cat '.escapeshellarg($file).'|grep -P "^\s*\t\s*"';
  exec($c, $o, $r);
  return count($o) ? true : false;
}

function getlinecount($file) {
  # run command
  unset($c, $o, $r);
  $c = 'wc -l '.escapeshellarg($file);
  exec($c, $o, $r);
  if ($r !== 0) {
    cl('Failed running "'.$c.'": '.implode(' ', $o).' ('.$r.').', VERBOSE_INFO);
    die(1);
  }
  if (!isset($o[0])) {
    cl('Failed extracting line amount for "'.$file.'".', VERBOSE_INFO);
    die(1);
  }
  return (int)substr($o[0], 0, strpos($o[0], ' '));
}


function getexpandlist($expandlistpath) {
    # make sure expand list exists
    if (!file_exists($expandlistpath)) {
      cl('Expandlist file '.$expandlistpath.' not found.', VERBOSE_ERROR);
      die(1);
    }

    # try to extract fullpath
    # $expandlistpath = extractpath($expandlistpath);

    # read expandlist
    $files = file($expandlistpath);
    if ($files === false) {
      cl('Could not read "'.$expandlistpath.'".', VERBOSE_ERROR);
      die(1);
    }

    $tmp = array();
    # walk files
    foreach ($files as $file) {
      $file = trim($file);
      # skip commented out lines
      if (substr($file, 0, 1) === '#' || !strlen($file)) {
        continue;
      }
      $tmp[] = $file;
    }
    $files = $tmp;

    return $files;
}

# get argument options
$opts = getopt(
  'a:b:p:e:hwv:',
  array(
    'action:',
    'path:',
    'expandlist:',
    'backup:',
    'config:',
    'config-write',
    'help',
    'write',
    'verbose:',
    'loglevel:',
    'logfile:',
    'logwidth:'
  )
);

# try to read global config
if (file_exists($config['config'])) {
  if (!$tmp = file_get_contents($config['config'])) {
    cl('Failed reading config file '.$config['config'].'.', VERBOSE_ERROR);
    die(1);
  }
  # strip config comments
  $tmp = explode("\n", $tmp);
  foreach ($tmp as $k => $v) {
      $tmp[$k] = preg_replace('/^\s*\#+.*$/', '',$v);
  }
  $tmp = implode("\n", $tmp);
  if (!$tmp = json_decode($tmp, true)) {
    cl('Failed JSON decoding config file '.$config['config'].'.', VERBOSE_ERROR);
    die(1);
  }
  $config = array_merge($config, $tmp);
} else if (!isset($opts['config-write'])) {
  cl('No config file, run again with --config-write to generate it.', VERBOSE_INFO);
  die(1);
}

# walk argument options
foreach ($opts as $opt => $value) {
  switch ($opt) {
    case 'a':
    case 'action':
      # spell out short versions
      switch ($value) {
        case 'a':
          $value = 'apply';
          break;
        case 'g':
          $value = 'generate';
          break;
        case 'e':
          $value = 'expand';
          break;
        case 'dr':
          $value = 'delete-reviews';
          break;
        case 'db':
          $value = 'delete-backups';
          break;
      }
      $config['action'] = $value;
      break;

    case 'b':
    case 'backup':
      $config['backup'] = (int)$value === 1;
      break;
    case 'config':
      $config['config'] = $value;
      break;
    case 'config-write':
      # remove items not applicable in config
      $tmp = array();
      foreach ($config as $k => $v) {
        if (
          !in_array(
            $k,
            array(
              'action', 'config', 'path'
            )
          )
        ) {
          $tmp[$k] = $v;
        }
      }
      # make json and indentation by 2
      $json_indented_by_4 = json_encode($tmp, JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT);
      $json_indented_by_2 = preg_replace('/^(  +?)\\1(?=[^ ])/m', '$1', $json_indented_by_4);
      file_put_contents($config['config'], $json_indented_by_2);
      cl('Writing config to '.$config['config'].'.', VERBOSE_INFO);
      die();
    case 'p':
    case 'path':
      $config['path'] = $value;
      break;
    case 'e':
    case 'expandlist':
      $config['expandlist'] = $value;
      break;
    case 'h': # print help
    case 'help':
?>
Changelog appender

Usage: <?php echo basename(__FILE__)?> <options>

Options:
  -a <action>, --action=<action>
    What to do. May be:
      generate or g, to generate a expandlist.
      expand or e, to run through the expandlist and generate
        filename.el-review files.
      apply or a, to run through the expandlist and move the
        filename.el-review-files over the originals.
      delete-backups or db, to delete filename.el-backup files.
      delete-reviews or dr, to delete filename.el-review files.

  -b <0/1>, --backup
    Turn backup on or off.
    Defaults to make backup named input.<?php echo basename(__FILE__)?>-backup-date.

  -e <file>, --expandlist=<file>
    The expandlist to write and read.
    Defaults to expandlist.txt

  -h, --help
    Print this information.

  --logfile=<file>
    Sets logfile.
    Defaults to /var/log/<?php echo basename(__FILE__) ?>.

  --loglevel=<0-4>
    Sets loglevel.
    0 = off, 1 = errors, 2 = info, 3-4 debug.
    Defaults to 0.

  -p <path>, --path=<path>
    Path to work on.
    Defaults to current directory.

  -w, --write
    Actually write the changes.
    Defaults to not writing changes.

  -v <0-4>, --verbose=<0-4>
    Sets verbosity level.
    0 = off, 1 = errors, 2 = info, 3-4 debug.
    Defaults to 1.
<?php
      die();
    case 'logfile':
      $config['logfile'] = $value;
      break;
    case 'loglevel':
      $config['loglevel'] = (int)$value;
      break;
    case 'logwidth': # line width limit
      $config['logwidth'] = (int)$value;
      break;
    case 'w':
    case 'write':
      $config['write'] = true;
      break;
    case 'v':
    case 'verbose':
      $config['verbose'] = (int)$value;
      break;
  }
}

if ($config['action'] === false || !strlen($config['action'])) {
  cl('Action must be specified.', VERBOSE_ERROR);
  die(1);
}

# try to get correct fullpath
$config['path'] = extractpath($config['path']);

# check and spell out the work directory
if (
  !is_dir($config['path'])
) {
  cl('Work path "'.$config['path'].'" is invalid.', VERBOSE_ERROR);
  die(1);
}

cl('Work path: "'.$config['path'].'"', VERBOSE_DEBUG);
# change work directory if needed
if (!chdir($config['path'])) {
  cl('Failed switching work path to "'.$config['path'].'".', VERBOSE_ERROR);
  die(1);
}

cl('Write changes: '.($config['write'] ? 'yes' : 'no').'.', VERBOSE_INFO);

switch ($config['action']) {
  case 'generate':
  # read expandlist

    # find files
    cl('Generating expandlist: "'.$config['path'].'/'.$config['expandlist'].'".', VERBOSE_INFO);
    unset($c, $o, $r);
    # $c = 'find '.escapeshellarg($config['path']).' -type f';
    $c = 'find . -type f';
   cl('Run: "'.$c.'".', VERBOSE_DEBUG_DEEP);
    exec($c, $o, $r);
    if ($r !== 0) {
      cl('Failed running "'.$c.'": '.implode(' ', $o).' ('.$r.').', VERBOSE_INFO);
      die(1);
    }
    $list = $o;

    # sort list
    asort($list);

    # print legend
    $files = array(
      '# Path: '.$config['path'],
      '# ?? = unknown file',
      '# IM = ignored by MIME',
      '# IN = ignored by filename',
      '# OK = already correct',
      '# ?? = unknown, tabs found',
      '# .. = unknown, no tabs found'
    );

    # walk files
    foreach ($list as $file) {
      $file = trim($file);

      $include = false;

      # empty line, go next
      if (!strlen($file)) {
        continue;
      }

      # skip - check for bad words in filename
      $skip = false;
      foreach ($config['ignorenames'] as $badword) {
        if (strpos($file, $badword) !== false) {
          $skip = true;
          break;
        }
      }
      if ($skip) {
        $files[] = '# IN '.$file;
        continue;
      }

      $filemime = mime_content_type($file);

      # skip - check for bad words in mime
      $skip = false;
      foreach ($config['ignoremimes'] as $badword) {
        if (strpos($filemime, $badword) !== false) {
          $skip = true;
          break;
        }
      }
      if ($skip) {
        $files[] = '# IM '.$file;
        continue;
      }

      # no reason to include? check endings
      if (!$include) {
        foreach ($config['includeextensions'] as $ending) {
          if (strtolower(substr($file, strrpos($file, '.'))) === '.'.strtolower($ending)) {
            $include = true;
            break;
          }
        }
      }

      # no reason to include? check mime
      if (!$include) {
        # include check for wanted endings
        $include = false;
        foreach ($config['includemimes'] as $mime) {
          if (strtolower($filemime) === strtolower($mime)) {
            $include = true;
            break;
          }
        }
      }

      # should file be included?
      if ($include) {
        # include - does it have tabs?
        if (hastabs($file)) {
          $files[] = $file;
        } else {
          $files[] = '# OK '.$file;
        }
      # or not included
      } else {
        if (hastabs($file)) {
          $files[] = '# ?? '.$file;
        } else {
          $files[] = '# .. '.$file;
        }
      }
    }

    if ($config['write']) {
      file_put_contents($config['expandlist'], implode("\n", $files));
    }

    die();
  case 'expand':

    $files = getexpandlist($config['expandlist']);

    # walk files
    foreach ($files as $file) {

      $file = $file;
      # $file = extractpath($file);
      if (!file_exists($file)) {
        cl('File not found, "'.$file.'".', VERBOSE_ERROR);
        continue;
      }

      $filetarget = $file.'.el-review';

      $linecountoriginal = getlinecount($file);
      cl('Line count in "'.$file.'": '.$linecountoriginal.'.', VERBOSE_INFO);

      cl('Expanding "'.$file.'" to "'.$filetarget.'".', VERBOSE_INFO);

      # run command
      unset($c, $o, $r);
      $c = 'expand -i -t 2 '.escapeshellarg($file).'| sponge '.escapeshellarg($filetarget);
      cl('Run: "'.$c.'".', VERBOSE_DEBUG_DEEP);
      if ($config['write']) {
        exec($c, $o, $r);
        if ($r !== 0) {
          cl('Failed running "'.$c.'": '.implode(' ', $o).' ('.$r.').', VERBOSE_INFO);
          die(1);
        }
      }

      if ($config['write']) {
        $linecounttarget = getlinecount($file);
      } else {
        $linecounttarget = $linecountoriginal;
      }
      cl('Line count in "'.$filetarget.'": '.$linecounttarget.'.', VERBOSE_INFO);

      if ($linecountoriginal != $linecounttarget) {
        cl('Line count differ after expand, "'.$file.'", '.$linecountoriginal.' versus ."'.$filetarget.'", '.$linecounttarget.'.', VERBOSE_ERROR);
      }

      cl('Changelog-appending "'.$filetarget.'".', VERBOSE_INFO);
      # run command
      unset($c, $o, $r);
      $c = implode(' ', array(
        '/usr/bin/php',
        '/opt/dptools/changelog-appender',
        '--input='.escapeshellarg($filetarget),
        '--output='.escapeshellarg($filetarget),
        '--modifiedfile='.escapeshellarg($file),
        '--backup=0',
        '--line="indentation change, tab to 2 spaces"',
        '-w'
      ));
      cl('Run: "'.$c.'"', VERBOSE_DEBUG_DEEP);
      if ($config['write']) {
        exec($c, $o, $r);
        if ($r !== 0) {
          cl('Failed running "'.$c.'": '.implode(' ', $o).' ('.$r.')', VERBOSE_ERROR);
          die(1);
        }
      }

      if ($config['write']) {
        $linecounttarget = getlinecount($file);
      } else {
        $linecounttarget = $linecountoriginal;
      }
      cl('Line count in "'.$filetarget.'": '.$linecounttarget.'.', VERBOSE_INFO);

      # lines may get more with append, but not less
      if ($linecountoriginal > $linecounttarget) {
        cl('Line count differ after changelog-append, "'.$file.'", '.$linecountoriginal.' versus ."'.$filetarget.'", '.$linecounttarget.'.', VERBOSE_ERROR);
      }


    }
    break;
  case 'apply':

    $files = getexpandlist($config['expandlist']);

    # walk files
    foreach ($files as $file) {

      $file = $file;
      $filesource = $file.'.el-review';
      if (!file_exists($filesource)) {
        cl('File not found, "'.$filesource.'".', VERBOSE_ERROR);
        continue;
      }

      # make backup?
      if ($config['backup']) {

        $copytarget = $file.'.el-backup';
        if (file_exists($copytarget)) {
          cl('Backup file exists, "'.$copytarget.'".', VERBOSE_ERROR);
          die(1);
        }

        # do backup
        cl('Backup: "'.$copytarget.'".', VERBOSE_INFO);
        if ($config['write']) {
          if (!copy_preserve($file, $copytarget)) {
            cl('Failed backing up "'.$file.'" to "'.$copytarget.'".', VERBOSE_ERROR);
            die(1);
          }
        }
      }

      cl('Replacing "'.$file.'" with "'.$filesource.'".', VERBOSE_INFO);

      # run command
      unset($c, $o, $r);
      $c = 'mv '.escapeshellarg($filesource).' '.escapeshellarg($file);
      cl('Run: "'.$c.'".', VERBOSE_DEBUG_DEEP);
      if ($config['write']) {
        exec($c, $o, $r);
        if ($r !== 0) {
          cl('Failed running "'.$c.'": '.implode(' ', $o).' ('.$r.').', VERBOSE_INFO);
          die(1);
        }
      }
    }
    break;
  case 'delete-backups':
  case 'delete-reviews':
    $files = getexpandlist($config['expandlist']);

    # walk files
    foreach ($files as $file) {
      switch ($config['action']) {
        case 'delete-backups':
          $filesource = $file.'.el-backup';
          break;
        case 'delete-reviews':
          $filesource = $file.'.el-review';
          break;
        default:
          cl('Unknown action "'.$config['action'].'".', VERBOSE_ERROR);
          die(1);
      }
      if (!file_exists($filesource)) {
        cl('File does not exist, "'.$filesource.'".', VERBOSE_DEBUG);
        continue;
      }
      cl('Deleting "'.$filesource.'"', VERBOSE_INFO);
      if ($config['write']) {
        if (!unlink($filesource)) {
          cl('Failed deleting "'.$filesource.'".', VERBOSE_ERROR);
        }
      }
    }
    die(1);
  default:
    cl('Unknown action "'.$config['action'].'"', VERBOSE_ERROR);
    die(1);
}
?>
