#!/usr/bin/php
<?php

# soundrenamer
# rename audio files automatically
# by robert klebe, dotpointer

# changelog
# 2011-04-08 00:00:00
# 2011-04-09 00:00:00
# 2011-08-21 00:00:00 - adding file endings
# 2011-12-06 00:00:00 - trying to fix damaged file names
# 2014-03-17 00:00:00 - fs now in utf8, not iso8859-1
# 2016-04-03 12:22:47
# 2016-04-03 15:29:32
# 2016-04-03 16:17:00
# 2018-06-28 18:27:00 - cleanup

# phase 1 - read the dates and files

$files = array();

define('FILE_INPUT_NAME', 1);
define('FILE_OUTPUT_NAME', 2);

$path = '.';

clearstatcache();

echo "File renamings:\n";

$endings = array('mp3', 'flac', 'wav');

$found = 0;
$skipped = 0;
$prepared = 0;

# try open dir
if ($handle = opendir($path)) {
	# walk dir contents
	while (false !== ($file = readdir($handle))) {
		# if no file, go next

		# ignore non-files
		if ($file == "." || $file == "..") continue;

		# make sure we have correct ending
		#$ending = '';
		#foreach ($endings as $currentending) {
		#	if (strpos(strtolower($file), $currentending) !== false) {
		#		$ending = $currentending;
		#		break;
		#	}
		#}

		# get the ending
		$ending_new = strpos($file, '.') !== false ? substr($file, strrpos($file, '.') + 1, strlen($file)) : '';

		# cleanup the ending
		$ending_new = trim(strtolower($ending_new));

		# if (!$ending) continue;

		# mark file found
		$found++;

		# get filename without the ending
		$file_new = substr($file, 0, strrpos($file, '.'));

		# make it all lowercase
		# $file_new = strtolower($file_new);

		# replace underscores and dots with spaces
		$file_new = str_replace('_', ' ', $file_new);
		$file_new = str_replace('.', ' ', $file_new);


		# remove multiple spaces
		$file_new = explode(' ', $file_new);
		foreach ($file_new as $key => $value) {
			if ($value == '') {
				unset($file_new[$key]);
				continue;
			}

			# replace words with correct case sensitivity
			$file_new[$key] = str_replace(
				array(
					'1080p',
					'720p',
					'ac3',
					'bluray',
					'brrip',
					'divx',
					'dvdrip',
					'dvdscr',
					'hdrip',
					'swesub',
					'webrip',
					'x264',
					'xvid'
				),
				array(
					'1080p',
					'720p',
					'AC3',
					'BluRay',
					'BRRip',
					'DivX',
					'DVDRip',
					'DVDScr',
					'HDRip',
					'SweSub',
					'WebRip',
					'x264',
					'XviD'
				),
				strtolower(isset($file_new[$key]) ? $file_new[$key] : '')
			);

			# is this something+rip?
			if (isset($file_new[$key - 1])) {
				# is the previous
				if (in_array(strtolower($file_new[$key - 1]), array('br', 'hd', 'dvd')) && strtolower($file_new[$key]) === 'rip') {
					$file_new[$key - 1] = strtoupper($file_new[$key - 1]).ucfirst($file_new[$key]);
					unset($file_new[$key]);
					continue;
				}
			}

			if (preg_match_all('/^[c|C][d|D]\d+$/', $file_new[$key])) {
				$file_new[$key] = strtoupper($file_new[$key]);
			}
		}
		$file_new = implode(' ', $file_new);

		# audio file specific fixes
		#if ($ending) {
			# fix "00 filename	.ext"  to 00. filename.ext
			$file_new = preg_replace('/^(\d+\.\d+|\d+)\s+(.*?)[\s\.]*?(\.[A-Za-z0-9]+)$/','$1. $2$3', $file_new);
		#}

		# fix filename.EXT
		#if ($last_dot = strrpos($file_new, '.')) {
		#	$file_new = substr($file_new, 0, $last_dot) . strtolower(substr($file_new, $last_dot, strlen($file_new)));
		#}

		# audio file specific fixes
		#if ($ending) {
			# fix artist - 00 - title.ext
			$name_or_title = '[A-Za-z0-9\såäöÅÄÖ]+';
			$file_new = preg_replace(
				'/^('.$name_or_title.')\s\-\s(\d+)\s\-\s('.$name_or_title.'\.[A-Za-z0-9]+)$/',
				'$2. $1 - $3',
				$file_new
			);

			# fix 00. - artist - title.ext misses
			$file_new = preg_replace(
				'/^(\d+\.\d+|\d+\.)\s+\-\s(.*?)$/',
				'$1 $2',
				$file_new
			);
		#}

		# fix encoding damages
		$file_new = str_replace(
			array(
			#	 "aÌ\212",
			#	 "aÌ\210",
			#	 "eÌ\201",
			".wav."#,
			#	 "Ã¥",
			#	 "Ã¤",
			#	 "Ã¶",
			#	 "Ã\205",
			#	 "Ã\204",
			#	 "Ã\226"
			),
			array(
			#	 'å',
			#	 'ä',
			#	 'é',
			'.'#,
			#	 'å',
			#	 'ä',
			#	 'ö',
			#	 'å',
			#	 'ä',
			#	 'ö'
			),
			$file_new
		);

		# turn lowercase words to uppercase in the beginning
		$file_new = ucwords($file_new);

		# glue the ending
		$file_new .= '.'.$ending_new;

		# no point of renaming
		if ($file_new == $file) {
			$skipped++; continue;
		}
		$prepared++;

		echo 'IN : "' . $file ."\"\n";
		echo 'OUT: "' . $file_new ."\"\n";

		# do file array
		$this_file = array(FILE_INPUT_NAME => $file, FILE_OUTPUT_NAME => $file_new);

		# add file to array
		$files[] = $this_file;

	}
	closedir($handle);
}

echo 'Found '.$found.' file(s), skipped '.$skipped.' file(s), prepared '.$prepared.' file(s).'."\n";
if ($prepared == 0) {
	exit;
}

echo 'Ready, press any key to reset dates...';
fgets(STDIN);

echo 'Trying to rename files:'."\n";

# walk files
foreach ($files as $file) {

	# does file exist
	if (file_exists($file[FILE_INPUT_NAME])) {

		# unchanged
		if ($file[FILE_INPUT_NAME] == $file[FILE_OUTPUT_NAME]) {
			$status = 'NO CHANGE';
		# changed
		} else {
			#try moving file
			if (rename($file[FILE_INPUT_NAME], $file[FILE_OUTPUT_NAME])) {
				$status = 'RENAMED';
			# failed
			} else {
				$status = 'RENAME FAILED';
			}
		}
	} else {
		$status = 'NOT FOUND';
	}

	echo 'IN:  ' . $file[FILE_INPUT_NAME]."\"\n";

	if (strpos($status, 'RENAMED')!==false) {
		echo 'OUT: ' . $file[FILE_OUTPUT_NAME]."\"\n";
	} else {
				echo '---: ' .$status."\n";
	}
}
?>
